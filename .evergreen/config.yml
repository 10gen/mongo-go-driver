########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: setup

# Fail builds when pre tasks fail.
pre_error_fails_task: true

# Protect the CI from long or indefinite runtimes.
exec_timeout_secs: 3600

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      shell: "bash"
      script: |
        ls -la
functions:
  setup-system:
    # Executes clone and applies the submitted patch, if any
    - command: git.get_project
      type: system
      params:
        directory: src/go.mongodb.org/mongo-driver
    # Make an env.sh and evergreen expansion file with dynamic values
    - command: subprocess.exec
      params:
        binary: bash
        working_dir: src/go.mongodb.org/mongo-driver
        env:
          GOROOT: ${GO_DIST}
          IS_PATCH: ${is_patch}
          VERSION_ID: ${version_id}
        args: 
          - ".evergreen/setup-system.sh"
    - command: expansions.update
      params:
        file: src/go.mongodb.org/mongo-driver/expansion.yml
    - command: subprocess.exec
      params:
        binary: bash
        include_expansions_in_env: ["PROJECT_DIRECTORY"]
        args:
          - "${DRIVERS_TOOLS}/.evergreen/setup.sh"

  handle-test-artifacts:
    - command: gotest.parse_files
      params:
        files:
          - "src/go.mongodb.org/mongo-driver/*.suite"
    - command: ec2.assume_role
      params:
        role_arn: ${assume_role_arn}
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_file: ${DRIVERS_TOOLS}/.evergreen/test_logs.tar.gz
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-drivers-tools-logs.tar.gz
        bucket: ${aws_bucket}
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "drivers-tools-logs.tar.gz"
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        optional: true
        local_file: ${PROJECT_DIRECTORY}/fuzz.tgz
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/${task_id}-${execution}-fuzz.tgz
        bucket: ${aws_bucket}
        permissions: public-read
        content_type: application/x-gzip
        display_name: "fuzz.tgz"
    - command: shell.exec
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          find . -name \*.suite | xargs tar czf test_suite.tgz
    - command: s3.put
      params:
        aws_key: ${AWS_ACCESS_KEY_ID}
        aws_secret: ${AWS_SECRET_ACCESS_KEY}
        aws_session_token: ${AWS_SESSION_TOKEN}
        local_file: src/go.mongodb.org/mongo-driver/test_suite.tgz
        optional: true
        remote_file: ${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-test_suite.tgz
        bucket: ${aws_bucket}
        permissions: public-read
        content_type: ${content_type|text/plain}
        display_name: "test_suite.tgz"

  bootstrap-mongohoused:
    - command: subprocess.exec
      params:
        binary: "bash"
        args: 
          - ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/pull-mongohouse-image.sh
    - command: subprocess.exec
      params:
        binary: "bash"
        args: 
          - ${DRIVERS_TOOLS}/.evergreen/atlas_data_lake/run-mongohouse-image.sh

  bootstrap-mongo-orchestration:
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          set -x
          MONGODB_VERSION=${VERSION} \
          TOPOLOGY=${TOPOLOGY} \
          AUTH=${AUTH} \
          SSL=${SSL} \
          ORCHESTRATION_FILE=${ORCHESTRATION_FILE} \
          REQUIRE_API_VERSION=${REQUIRE_API_VERSION} \
          LOAD_BALANCER=${LOAD_BALANCER} \
          bash ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    - command: expansions.update
      params:
        file: mo-expansion.yml

  ocsp-bootstrap-mongo-orchestration:
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          MONGODB_VERSION=${VERSION} \
          TOPOLOGY=${TOPOLOGY} \
          AUTH=${AUTH} \
          SSL=${SSL} \
          ORCHESTRATION_FILE=${ORCHESTRATION_FILE} \
          bash ${DRIVERS_TOOLS}/.evergreen/run-orchestration.sh
    - command: expansions.update
      params:
        file: mo-expansion.yml

  teardown:
    - command: subprocess.exec
      params:
        binary: "bash"
        args: 
          # Ensure the instance profile is reassigned for aws tests.
          - ${DRIVERS_TOOLS}/.evergreen/auth_aws/teardown.sh
    - command: subprocess.exec
      params:
        binary: "bash"
        args: 
          - ${DRIVERS_TOOLS}/.evergreen/csfle/teardown.sh
    - command: subprocess.exec
      params:
        binary: "bash"
        args: 
          - ${DRIVERS_TOOLS}/.evergreen/teardown.sh

  assume-ec2-role:
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}

  run-oidc-auth-test-with-test-credentials:
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        env: 
          OIDC: oidc
        include_expansions_in_env: ["DRIVERS_TOOLS", "AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        args: 
          - ${RUN_TASK} 
          - test-oidc

  run-task:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          ${BUILD_ENV|} BUILD_TAGS=${BUILD_TAGS|-tags=cse,gssapi} ${RUN_TASK} setup-test
          ${RUN_TASK} ${targets}

  run-tests:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        include_expansions_in_env: ["TOPOLOGY", "AUTH", "SSL", "SKIP_CSOT_TESTS", "MONGODB_URI", "CRYPT_SHARED_LIB_PATH", "SKIP_CRYPT_SHARED_LIB", "RACE", "MONGO_GO_DRIVER_COMPRESSOR", "REQUIRE_API_VERSION", "LOAD_BALANCER"]
        script: |
          set -e
          GO_BUILD_TAGS="cse" ${RUN_TASK} setup-test
          if [ "$(uname -s)" = "Darwin" ]; then
              # Run a subset of the tests on Darwin
              ${RUN_TASK} evg-test-load-balancers
          else
              ${RUN_TASK} evg-test
          fi

  create-api-report:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          export BASE_SHA=${revision}
          export HEAD_SHA=${github_commit}
          ${RUN_TASK} api-report

  "add PR labels":
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          export CONFIG=${PROJECT_DIRECTORY}/.github/labeler.yml
          export SCRIPT="${DRIVERS_TOOLS}/.evergreen/github_app/apply-labels.sh"
          bash $SCRIPT -l $CONFIG -h ${github_commit} -o "mongodb" -n "mongo-go-driver"

  "add PR reviewer":
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          export CONFIG=${PROJECT_DIRECTORY}/.github/reviewers.txt
          export SCRIPT="${DRIVERS_TOOLS}/.evergreen/github_app/assign-reviewer.sh"
          bash $SCRIPT -p $CONFIG -h ${github_commit} -o "mongodb" -n "mongo-go-driver"

  "backport pr":
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - ${DRIVERS_TOOLS}/.evergreen/github_app/backport-pr.sh 
          - mongodb 
          - mongo-go-driver 
          - ${github_commit}

  send-perf-data:
    - command: perf.send
      params:
        file: src/go.mongodb.org/mongo-driver/perf.json

  run-enterprise-auth-tests:
    - command: ec2.assume_role
      params:
        role_arn: "${aws_test_secrets_role}"
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        script: |
          ${RUN_TASK} setup-test -- enterprise-plain
          ${RUN_TASK} --silent evg-test-enterprise-auth

  run-enterprise-gssapi-auth-tests:
    - command: ec2.assume_role
      params:
        role_arn: "${aws_test_secrets_role}"
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        script: |
          ${RUN_TASK} setup-test -- enterprise-gssapi
          ${RUN_TASK} --silent evg-test-enterprise-auth

  run-atlas-test:
    - command: ec2.assume_role
      params:
        role_arn: "${aws_test_secrets_role}"
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        script: |
          ${RUN_TASK} setup-test -- atlas-connect
          ${RUN_TASK} test-atlas-connect

  run-ocsp-test:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          export MONGO_GO_DRIVER_CA_FILE="${DRIVERS_TOOLS}/.evergreen/ocsp/${OCSP_ALGORITHM}/ca.pem"
          if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
            export MONGO_GO_DRIVER_CA_FILE=$(cygpath -m $MONGO_GO_DRIVER_CA_FILE)
          fi

          AUTH="auth" \
          SSL="ssl" \
          TOPOLOGY="server" \
          MONGODB_URI="${MONGODB_URI}" \
          OCSP_TLS_SHOULD_SUCCEED="${OCSP_TLS_SHOULD_SUCCEED}" \
          ${RUN_TASK} evg-test-ocsp

  run-versioned-api-test:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          AUTH="${AUTH}" \
          SSL="${SSL}" \
          MONGODB_URI="${MONGODB_URI}" \
          TOPOLOGY="${TOPOLOGY}" \
          MONGO_GO_DRIVER_COMPRESSOR=${MONGO_GO_DRIVER_COMPRESSOR} \
          GO_BUILD_TAGS="cse" \
          REQUIRE_API_VERSION="${REQUIRE_API_VERSION}" \
          SKIP_CRYPT_SHARED_LIB=${SKIP_CRYPT_SHARED_LIB} \
          CRYPT_SHARED_LIB_PATH="$CRYPT_SHARED_LIB_PATH" \
          ${RUN_TASK} setup-test

          ${RUN_TASK} evg-test-versioned-api

  run-load-balancer-tests:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          # Verify that the required LB URI expansions are set to ensure that the test runner can correctly connect to
          # the LBs.
          if [ -z "${SINGLE_MONGOS_LB_URI}" ]; then
            echo "SINGLE_MONGOS_LB_URI must be set for testing against LBs"
            exit 1
          fi
          if [ -z "${MULTI_MONGOS_LB_URI}" ]; then
            echo "MULTI_MONGOS_LB_URI must be set for testing against LBs"
            exit 1
          fi

          # Per the LB testing spec, the URI of an LB fronting a single mongos should be used to configure internal
          # testing Client instances, so we set MONGODB_URI to SINGLE_MONGOS_LB_URI.
          AUTH="${AUTH}" \
          SSL="${SSL}" \
          MONGODB_URI="${SINGLE_MONGOS_LB_URI}" \
          TOPOLOGY="${TOPOLOGY}" \
          MONGO_GO_DRIVER_COMPRESSOR=${MONGO_GO_DRIVER_COMPRESSOR} \
          ${RUN_TASK} setup-test

          SINGLE_MONGOS_LB_URI="${SINGLE_MONGOS_LB_URI}" \
          MULTI_MONGOS_LB_URI="${MULTI_MONGOS_LB_URI}" \
          ${RUN_TASK} evg-test-load-balancers

  run-serverless-tests:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          ${RUN_TASK} setup-test -- serverless
          ${RUN_TASK} evg-test-serverless

  run-atlas-data-lake-test:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          AUTH="auth" \
          SSL="nossl" \
          TOPOLOGY="server" \
          MONGODB_URI="mongodb://mhuser:pencil@localhost" \
          ${RUN_TASK} setup-test

          ${RUN_TASK} evg-test-atlas-data-lake

  run-docker-test:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          ${RUN_TASK} run-docker
          TOPOLOGY=sharded_cluster ${RUN_TASK} run-docker -- test-short

  run-valid-ocsp-server:
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          . ./activate-ocspvenv.sh

          python ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ca.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ca.key \
          -p 8100 -v

  run-revoked-ocsp-server:
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          . ./activate-ocspvenv.sh

          python ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ca.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ca.key \
          -p 8100 \
          -v \
          --fault revoked

  run-valid-delegate-ocsp-server:
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          . ./activate-ocspvenv.sh

          python ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ocsp-responder.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ocsp-responder.key \
          -p 8100 -v

  run-revoked-delegate-ocsp-server:
    - command: shell.exec
      params:
        shell: "bash"
        background: true
        script: |
          cd ${DRIVERS_TOOLS}/.evergreen/ocsp
          . ./activate-ocspvenv.sh

          python ocsp_mock.py \
          --ca_file ${OCSP_ALGORITHM}/ca.pem \
          --ocsp_responder_cert ${OCSP_ALGORITHM}/ocsp-responder.crt \
          --ocsp_responder_key ${OCSP_ALGORITHM}/ocsp-responder.key \
          -p 8100 \
          -v \
          --fault revoked

  run-load-balancer:
    - command: shell.exec
      params:
        shell: "bash"
        script: |
          DRIVERS_TOOLS=${DRIVERS_TOOLS} MONGODB_URI=${MONGODB_URI} bash ${DRIVERS_TOOLS}/.evergreen/run-load-balancer.sh start
    - command: expansions.update
      params:
        file: lb-expansion.yml

  run-search-index-tests:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          TEST_INDEX_URI="${TEST_INDEX_URI}" \
          ${RUN_TASK} evg-test-search-index

  add-aws-auth-variables-to-file:
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
        binary: "bash"
        args: 
          - ${DRIVERS_TOOLS}/.evergreen/auth_aws/setup-secrets.sh

  run-aws-auth-test-with-regular-aws-credentials:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          ${RUN_TASK} evg-test-aws -- regular

  run-aws-auth-test-with-assume-role-credentials:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          ${RUN_TASK} evg-test-aws -- assume-role

  run-aws-auth-test-with-aws-EC2-credentials:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          if [ "${SKIP_EC2_AUTH_TEST}" = "true" ]; then
            echo "This platform does not support the EC2 auth test, skipping..."
            exit 0
          fi
          ${RUN_TASK} evg-test-aws -- ec2

  run-aws-auth-test-with-aws-credentials-as-environment-variables:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          ${RUN_TASK} evg-test-aws -- env-creds

  run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          ${RUN_TASK} evg-test-aws -- session-creds

  run-aws-ECS-auth-test:
    - command: subprocess.exec
      type: test
      params:
        binary: "bash"
        working_dir: src
        include_expansions_in_env: ["SKIP_ECS_AUTH_TEST"]
        args: 
          - ${RUN_TASK} 
          - evg-test-aws-ecs

  run-aws-auth-test-with-aws-web-identity-credentials:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          if [ "${SKIP_WEB_IDENTITY_AUTH_TEST}" = "true" ]; then
             echo "This platform does not support the web identity auth test, skipping..."
             exit 0
          fi
          ${RUN_TASK} evg-test-aws -- web-identity
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          if [ "${SKIP_WEB_IDENTITY_AUTH_TEST}" = "true" ]; then
             echo "This platform does not support the web identity auth test, skipping..."
             exit 0
          fi
          export AWS_ROLE_SESSION_NAME="test"
          ${RUN_TASK} evg-test-aws -- web-identity

  start-cse-servers:
    - command: ec2.assume_role
      params:
        role_arn: ${aws_test_secrets_role}
    - command: subprocess.exec
      params:
        working_dir: src/go.mongodb.org/mongo-driver
        binary: bash
        background: true
        include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN", "DRIVERS_TOOLS"]
        args:
          - etc/setup-encryption.sh
    - command: subprocess.exec
      params:
        working_dir: src/go.mongodb.org/mongo-driver
        binary: bash
        args:
          - ${DRIVERS_TOOLS}/.evergreen/csfle/await-servers.sh

  run-kms-tls-test:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          AUTH="${AUTH}" \
          SSL="${SSL}" \
          MONGODB_URI="${MONGODB_URI}" \
          TOPOLOGY="${TOPOLOGY}" \
          MONGO_GO_DRIVER_COMPRESSOR=${MONGO_GO_DRIVER_COMPRESSOR} \
          GO_BUILD_TAGS="cse" \
          ${RUN_TASK} setup-test 

          KMS_TLS_TESTCASE="${KMS_TLS_TESTCASE}" ${RUN_TASK} evg-test-kms

  run-kmip-tests:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          AUTH="${AUTH}" \
          SSL="${SSL}" \
          MONGODB_URI="${MONGODB_URI}" \
          TOPOLOGY="${TOPOLOGY}" \
          MONGO_GO_DRIVER_COMPRESSOR=${MONGO_GO_DRIVER_COMPRESSOR} \
          GO_BUILD_TAGS="cse" \
          ${RUN_TASK} setup-test 

          KMS_MOCK_SERVERS_RUNNING="true" ${RUN_TASK} evg-test-kmip

  run-fuzz-tests:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          ${RUN_TASK} run-fuzz

pre:
  - func: setup-system

post:
  - func: teardown
  - func: handle-test-artifacts

tasks:
  - name: static-analysis
    tags: ["static-analysis"]
    commands:
      - func: run-task
        vars:
          targets: "check-fmt check-license check-modules lint"

  - name: pull-request-helpers
    allowed_requesters: ["patch", "github_pr"]
    commands:
      - func: "add PR reviewer"  
      - func: "add PR labels"
      - func: "create-api-report"

  - name: backport-pr
    allowed_requesters: ["commit"]
    commands:
      - func: "backport pr"  

  - name: perf
    tags: ["performance"]
    exec_timeout_secs: 7200
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
      - func: run-task
        vars:
          targets: driver-benchmark
      - func: send-perf-data

  - name: test-standalone-noauth-nossl
    tags: ["test", "standalone"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"

  - name: test-standalone-noauth-nossl-snappy-compression
    tags: ["test", "standalone", "compression", "snappy"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
          MONGO_GO_DRIVER_COMPRESSOR: "snappy"

  - name: test-standalone-noauth-nossl-zlib-compression
    tags: ["test", "standalone", "compression", "zlib"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
          MONGO_GO_DRIVER_COMPRESSOR: "zlib"

  - name: test-standalone-noauth-nossl-zstd-compression
    tags: ["test", "standalone", "compression", "zstd"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
          MONGO_GO_DRIVER_COMPRESSOR: "zstd"

  - name: test-standalone-auth-ssl
    tags: ["test", "standalone", "authssl"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "ssl"

  - name: test-standalone-auth-nossl
    tags: ["test", "standalone", "authssl"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "nossl"

  - name: test-standalone-auth-ssl-snappy-compression
    tags: ["test", "standalone", "authssl", "compression", "snappy"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "ssl"
          MONGO_GO_DRIVER_COMPRESSOR: "snappy"

  - name: test-standalone-auth-ssl-zlib-compression
    tags: ["test", "standalone", "authssl", "compression", "zlib"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "ssl"
          MONGO_GO_DRIVER_COMPRESSOR: "zlib"

  - name: test-standalone-auth-ssl-zstd-compression
    tags: ["test", "standalone", "authssl", "compression", "zstd"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "ssl"
          MONGO_GO_DRIVER_COMPRESSOR: "zstd"

  - name: test-ocsp-rsa-valid-cert-server-staples
    tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
    commands:
      - func: run-valid-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-rsa-invalid-cert-server-staples
    tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
    commands:
      - func: run-revoked-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-rsa-valid-cert-server-does-not-staple
    tags: ["ocsp", "ocsp-rsa"]
    commands:
      - func: run-valid-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-rsa-invalid-cert-server-does-not-staple
    tags: ["ocsp", "ocsp-rsa"]
    commands:
      - func: run-revoked-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-rsa-soft-fail
    tags: ["ocsp", "ocsp-rsa"]
    commands:
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-rsa-malicious-invalid-cert-mustStaple-server-does-not-staple
    tags: ["ocsp", "ocsp-rsa"]
    commands:
      - func: run-revoked-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-rsa-malicious-no-responder-mustStaple-server-does-not-staple
    tags: ["ocsp", "ocsp-rsa"]
    commands:
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-rsa-delegate-valid-cert-server-staples
    tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
    commands:
      - func: run-valid-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-rsa-delegate-invalid-cert-server-staples
    tags: ["ocsp", "ocsp-rsa", "ocsp-staple"]
    commands:
      - func: run-revoked-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-rsa-delegate-valid-cert-server-does-not-staple
    tags: ["ocsp", "ocsp-rsa"]
    commands:
      - func: run-valid-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-rsa-delegate-invalid-cert-server-does-not-staple
    tags: ["ocsp", "ocsp-rsa"]
    commands:
      - func: run-revoked-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-rsa-delegate-malicious-invalid-cert-mustStaple-server-does-not-staple
    tags: ["ocsp", "ocsp-rsa"]
    commands:
      - func: run-revoked-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "rsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "rsa-basic-tls-ocsp-mustStaple-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "rsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-ecdsa-valid-cert-server-staples
    tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
    commands:
      - func: run-valid-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-ecdsa-invalid-cert-server-staples
    tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
    commands:
      - func: run-revoked-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-ecdsa-valid-cert-server-does-not-staple
    tags: ["ocsp", "ocsp-ecdsa"]
    commands:
      - func: run-valid-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-ecdsa-invalid-cert-server-does-not-staple
    tags: ["ocsp", "ocsp-ecdsa"]
    commands:
      - func: run-revoked-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-ecdsa-soft-fail
    tags: ["ocsp", "ocsp-ecdsa"]
    commands:
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-ecdsa-malicious-invalid-cert-mustStaple-server-does-not-staple
    tags: ["ocsp", "ocsp-ecdsa"]
    commands:
      - func: run-revoked-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-ecdsa-malicious-no-responder-mustStaple-server-does-not-staple
    tags: ["ocsp", "ocsp-ecdsa"]
    commands:
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-ecdsa-delegate-valid-cert-server-staples
    tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
    commands:
      - func: run-valid-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-ecdsa-delegate-invalid-cert-server-staples
    tags: ["ocsp", "ocsp-ecdsa", "ocsp-staple"]
    commands:
      - func: run-revoked-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-ecdsa-delegate-valid-cert-server-does-not-staple
    tags: ["ocsp", "ocsp-ecdsa"]
    commands:
      - func: run-valid-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "true"

  - name: test-ocsp-ecdsa-delegate-invalid-cert-server-does-not-staple
    tags: ["ocsp", "ocsp-ecdsa"]
    commands:
      - func: run-revoked-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-ocsp-ecdsa-delegate-malicious-invalid-cert-mustStaple-server-does-not-staple
    tags: ["ocsp", "ocsp-ecdsa"]
    commands:
      - func: run-revoked-delegate-ocsp-server
        vars:
          OCSP_ALGORITHM: "ecdsa"
      - func: ocsp-bootstrap-mongo-orchestration
        vars:
          ORCHESTRATION_FILE: "ecdsa-basic-tls-ocsp-mustStaple-disableStapling.json"
      - func: run-ocsp-test
        vars:
          OCSP_ALGORITHM: "ecdsa"
          OCSP_TLS_SHOULD_SUCCEED: "false"

  - name: test-atlas-data-lake
    commands:
      - func: bootstrap-mongohoused
      - func: run-atlas-data-lake-test

  - name: test-docker-runner
    commands:
      - func: bootstrap-mongo-orchestration
      - func: run-docker-test

  - name: test-load-balancer-noauth-nossl
    tags: ["load-balancer"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "noauth"
          SSL: "nossl"
          LOAD_BALANCER: "true"
      - func: run-load-balancer
      - func: run-load-balancer-tests
        vars:
          AUTH: "noauth"
          SSL: "nossl"

  - name: test-load-balancer-auth-ssl
    tags: ["load-balancer"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "ssl"
          LOAD_BALANCER: "true"
      - func: run-load-balancer
      - func: run-load-balancer-tests
        vars:
          AUTH: "auth"
          SSL: "ssl"

  - name: test-race
    tags: ["race"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "noauth"
          SSL: "nossl"
          RACE: "-race"

  - name: test-replicaset-noauth-nossl
    tags: ["test", "replicaset"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "noauth"
          SSL: "nossl"

  - name: test-replicaset-auth-ssl
    tags: ["test", "replicaset", "authssl"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "auth"
          SSL: "ssl"

  - name: test-replicaset-auth-ssl-mongocryptd
    tags: ["test", "replicaset", "authssl", "mongocryptd"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "auth"
          SSL: "ssl"
          # Don't use the crypt_shared library, which should cause all of the tests to fall
          # back to using mongocryptd instead of crypt_shared.
          SKIP_CRYPT_SHARED_LIB: "true"

  - name: test-replicaset-auth-nossl
    tags: ["test", "replicaset", "authssl"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "auth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "replica_set"
          AUTH: "auth"
          SSL: "nossl"

  - name: test-sharded-noauth-nossl
    tags: ["test", "sharded"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "noauth"
          SSL: "nossl"

  - name: test-sharded-noauth-nossl-snappy-compression
    tags: ["test", "sharded", "compression", "snappy"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "noauth"
          SSL: "nossl"
          MONGO_GO_DRIVER_COMPRESSOR: "snappy"

  - name: test-sharded-noauth-nossl-zlib-compression
    tags: ["test", "sharded", "compression", "zlib"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "noauth"
          SSL: "nossl"
          MONGO_GO_DRIVER_COMPRESSOR: "zlib"

  - name: test-sharded-noauth-nossl-zstd-compression
    tags: ["test", "sharded", "compression", "zstd"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "noauth"
          SSL: "nossl"
          MONGO_GO_DRIVER_COMPRESSOR: "zstd"

  - name: test-sharded-auth-ssl
    tags: ["test", "sharded", "authssl"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "ssl"

  - name: test-sharded-auth-ssl-snappy-compression
    tags: ["test", "sharded", "authssl", "compression", "snappy"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "ssl"
          MONGO_GO_DRIVER_COMPRESSOR: "snappy"

  - name: test-sharded-auth-ssl-zlib-compression
    tags: ["test", "sharded", "authssl", "compression", "zlib"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "ssl"
          MONGO_GO_DRIVER_COMPRESSOR: "zlib"

  - name: test-sharded-auth-ssl-zstd-compression
    tags: ["test", "sharded", "authssl", "compression", "zstd"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "ssl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "ssl"
          MONGO_GO_DRIVER_COMPRESSOR: "zstd"

  - name: test-sharded-auth-nossl
    tags: ["test", "sharded", "authssl"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-tests
        vars:
          TOPOLOGY: "sharded_cluster"
          AUTH: "auth"
          SSL: "nossl"

  - name: test-enterprise-auth-plain
    tags: ["test", "enterprise-auth"]
    commands:
      - func: run-enterprise-auth-tests

  - name: test-enterprise-auth-gssapi
    tags: ["test", "enterprise-auth"]
    commands:
      - func: run-enterprise-gssapi-auth-tests
        vars:
          MONGO_GO_DRIVER_COMPRESSOR: "snappy"

  # Build with the oldest supported version of Go.
  - name: go1.18-build
    tags: ["compile-check"]
    commands:
      - func: run-task
        vars:
          targets: "build-compile-check"
          BUILD_ENV: "PATH=/opt/golang/go1.18/bin:$PATH GOROOT=/opt/golang/go1.18"

  # Build with the same Go version that we're using for tests.
  - name: build
    tags: ["compile-check"]
    commands:
      - func: run-task
        vars:
          targets: "build"

  - name: "atlas-test"
    commands:
      - func: "run-atlas-test"

  - name: "aws-auth-test"
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          AUTH: "auth"
          ORCHESTRATION_FILE: "auth-aws.json"
          TOPOLOGY: "server"
      - func: add-aws-auth-variables-to-file
      - func: run-aws-auth-test-with-regular-aws-credentials
      - func: run-aws-auth-test-with-assume-role-credentials
      - func: run-aws-auth-test-with-aws-credentials-as-environment-variables
      - func: run-aws-auth-test-with-aws-credentials-and-session-token-as-environment-variables
      - func: run-aws-auth-test-with-aws-EC2-credentials
      - func: run-aws-ECS-auth-test
      - func: run-aws-auth-test-with-aws-web-identity-credentials

  - name: "test-standalone-versioned-api"
    tags: ["versioned-api"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "nossl"
          REQUIRE_API_VERSION: true
      - func: start-cse-servers
      - func: run-versioned-api-test
        vars:
          TOPOLOGY: "server"
          AUTH: "auth"
          SSL: "nossl"
          REQUIRE_API_VERSION: true

  - name: "test-standalone-versioned-api-test-commands"
    tags: ["versioned-api"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
          ORCHESTRATION_FILE: "versioned-api-testing.json"
      - func: start-cse-servers
      - func: run-versioned-api-test
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"

  - name: "test-kms-tls-invalid-cert"
    tags: ["kms-tls"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-kms-tls-test
        vars:
          KMS_TLS_TESTCASE: "INVALID_CERT"
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"

  - name: "test-kms-tls-invalid-hostname"
    tags: ["kms-tls"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-kms-tls-test
        vars:
          KMS_TLS_TESTCASE: "INVALID_HOSTNAME"
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"

  - name: "test-kms-kmip"
    tags: ["kms-kmip"]
    commands:
      - func: bootstrap-mongo-orchestration
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"
      - func: start-cse-servers
      - func: run-kmip-tests
        vars:
          TOPOLOGY: "server"
          AUTH: "noauth"
          SSL: "nossl"

  - name: "test-serverless"
    tags: ["serverless"]
    commands:
      - func: start-cse-servers
      - func: "run-serverless-tests"
        vars:
          MONGO_GO_DRIVER_COMPRESSOR: "snappy"

  - name: "testgcpkms-task"
    commands:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          GO_BUILD_TAGS="cse" ${RUN_TASK} setup-test
          ${RUN_TASK} build-kms-test
          source ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/secrets-export.sh
          echo "Copying files ... begin"
          tar czf testgcpkms.tgz ./testkms ./install/libmongocrypt/lib64/libmongocrypt.*
          GCPKMS_SRC=testgcpkms.tgz GCPKMS_DST=$GCPKMS_INSTANCENAME: ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/copy-file.sh
          echo "Copying files ... end"

          echo "Untarring file ... begin"
          GCPKMS_CMD="tar xf testgcpkms.tgz" ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/run-command.sh
          echo "Untarring file ... end"

    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          source ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/secrets-export.sh
          GCPKMS_CMD="LD_LIBRARY_PATH=./install/libmongocrypt/lib64 MONGODB_URI='mongodb://localhost:27017' PROVIDER='gcp' ./testkms" ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/run-command.sh

  - name: "testgcpkms-fail-task"
    # testgcpkms-fail-task runs in a non-GCE environment.
    # It is expected to fail to obtain GCE credentials.
    commands:
      - command: shell.exec
        type: test
        params:
          shell: "bash"
          working_dir: src/go.mongodb.org/mongo-driver
          script: |
            GO_BUILD_TAGS="cse" ${RUN_TASK} setup-test
            ${RUN_TASK} build-kms-test

            LD_LIBRARY_PATH=./install/libmongocrypt/lib64 \
            MONGODB_URI='mongodb://localhost:27017/' \
            EXPECT_ERROR='unable to retrieve GCP credentials' \
            PROVIDER='gcp' \
              ./testkms

  - name: "testawskms-task"
    commands:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          ${RUN_TASK} test-awskms

  - name: "testawskms-fail-task"
    # testawskms-fail-task runs without environment variables.
    # It is expected to fail to obtain credentials.
    commands:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          export EXPECT_ERROR='status=400'
          ${RUN_TASK} test-awskms

  - name: "testazurekms-task"
    commands:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          GO_BUILD_TAGS="cse" ${RUN_TASK} setup-test
          ${RUN_TASK} build-kms-test
          echo "Copying files ... begin"
          source ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/secrets-export.sh
          tar czf testazurekms.tgz ./testkms ./install/libmongocrypt/lib64/libmongocrypt.*
          AZUREKMS_SRC=testazurekms.tgz AZUREKMS_DST=/tmp ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/copy-file.sh
          echo "Copying files ... end"
          echo "Untarring file ... begin"
          AZUREKMS_CMD="tar xf /tmp/testazurekms.tgz" ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/run-command.sh
          echo "Untarring file ... end"

    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          source ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/secrets-export.sh
          AZUREKMS_CMD="LD_LIBRARY_PATH=./install/libmongocrypt/lib64 MONGODB_URI='mongodb://localhost:27017' PROVIDER='azure' AZUREKMS_KEY_NAME=$AZUREKMS_KEYNAME AZUREKMS_KEY_VAULT_ENDPOINT=$AZUREKMS_KEYVAULTENDPOINT ./testkms" ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/run-command.sh

  - name: "testazurekms-fail-task"
    # testazurekms-fail-task runs without environment variables.
    # It is expected to fail to obtain credentials.
    commands:
    - command: shell.exec
      type: test
      params:
        shell: "bash"
        working_dir: src/go.mongodb.org/mongo-driver
        script: |
          GO_BUILD_TAGS="cse" ${RUN_TASK} setup-test
          ${RUN_TASK} build-kms-test
          . ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/setup-secrets.sh
          LD_LIBRARY_PATH=./install/libmongocrypt/lib64 \
          MONGODB_URI='mongodb://localhost:27017' \
          EXPECT_ERROR='unable to retrieve azure credentials' \
          PROVIDER='azure' AZUREKMS_KEY_NAME=$AZUREKMS_KEYNAME AZUREKMS_KEY_VAULT_ENDPOINT=$AZUREKMS_KEYVAULTENDPOINT \
            ./testkms

  - name: "test-fuzz"
    commands:
      - func: bootstrap-mongo-orchestration
      - func: run-fuzz-tests

  - name: "test-aws-lambda-deployed"
    commands:
      - command: ec2.assume_role
        params:
          role_arn: ${LAMBDA_AWS_ROLE_ARN}
          duration_seconds: 3600
      - command: shell.exec
        type: test
        params:
          working_dir: src/go.mongodb.org/mongo-driver
          shell: bash
          env:
            TEST_LAMBDA_DIRECTORY: ${PROJECT_DIRECTORY}/internal/cmd/faas/awslambda
            LAMBDA_STACK_NAME: dbx-go-lambda
            AWS_REGION: us-east-1
          include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
          script: |
            ${RUN_TASK} evg-test-deployed-lambda-aws

  - name: "oidc-auth-test"
    commands:
      - func: "run-oidc-auth-test-with-test-credentials"

  - name: "oidc-auth-test-azure"
    commands:
    - command: shell.exec
      type: test
      params:
        working_dir: src/go.mongodb.org/mongo-driver
        shell: bash
        script: |-
          set -o errexit
          source env.sh
          export AZUREOIDC_DRIVERS_TAR_FILE=/tmp/mongo-go-driver.tar.gz
          # we need to statically link libc to avoid the situation where the VM has a different
          # version of libc
          go build -tags osusergo,netgo -ldflags '-w -extldflags "-static -lgcc -lc"' -o test ./internal/cmd/testoidcauth/main.go
          rm "$AZUREOIDC_DRIVERS_TAR_FILE" || true
          tar -cf $AZUREOIDC_DRIVERS_TAR_FILE ./test
          tar -uf $AZUREOIDC_DRIVERS_TAR_FILE ./etc
          rm "$AZUREOIDC_DRIVERS_TAR_FILE".gz || true
          gzip $AZUREOIDC_DRIVERS_TAR_FILE
          export AZUREOIDC_DRIVERS_TAR_FILE=/tmp/mongo-go-driver.tar.gz
          # Define the command to run on the azure VM.
          # Ensure that we source the environment file created for us, set up any other variables we need,
          # and then run our test suite on the vm.
          export AZUREOIDC_TEST_CMD="PROJECT_DIRECTORY='.' OIDC_ENV=azure OIDC=oidc ./etc/run-oidc-test.sh ./test"
          bash ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure/run-driver-test.sh

  - name: "oidc-auth-test-gcp"
    commands:
    - command: shell.exec
      type: test
      params:
        working_dir: src/go.mongodb.org/mongo-driver
        shell: bash
        script: |-
          set -o errexit
          source env.sh
          export GCPOIDC_DRIVERS_TAR_FILE=/tmp/mongo-go-driver.tar.gz
          # we need to statically link libc to avoid the situation where the VM has a different
          # version of libc
          go build -tags osusergo,netgo -ldflags '-w -extldflags "-static -lgcc -lc"' -o test ./internal/cmd/testoidcauth/main.go
          rm "$GCPOIDC_DRIVERS_TAR_FILE" || true
          tar -cf $GCPOIDC_DRIVERS_TAR_FILE ./test
          tar -uf $GCPOIDC_DRIVERS_TAR_FILE ./etc
          rm "$GCPOIDC_DRIVERS_TAR_FILE".gz || true
          gzip $GCPOIDC_DRIVERS_TAR_FILE
          export GCPOIDC_DRIVERS_TAR_FILE=/tmp/mongo-go-driver.tar.gz
          # Define the command to run on the gcp VM.
          # Ensure that we source the environment file created for us, set up any other variables we need,
          # and then run our test suite on the vm.
          export GCPOIDC_TEST_CMD="PROJECT_DIRECTORY='.' OIDC_ENV=gcp OIDC=oidc ./etc/run-oidc-test.sh ./test"
          bash ${DRIVERS_TOOLS}/.evergreen/auth_oidc/gcp/run-driver-test.sh

  - name: "test-search-index"
    commands:
      - func: "bootstrap-mongo-orchestration"
        vars:
          VERSION: "latest"
          TOPOLOGY: "replica_set"
      - func: "run-search-index-tests"

axes:
  - id: version
    display_name: MongoDB Version
    values:
      - id: "8.0"
        display_name: "8.0"
        variables:
          VERSION: "8.0"
      - id: "7.0"
        display_name: "7.0"
        variables:
          VERSION: "7.0"
      - id: "6.0"
        display_name: "6.0"
        variables:
          VERSION: "6.0"
      - id: "5.0"
        display_name: "5.0"
        variables:
          VERSION: "5.0"
      - id: "4.4"
        display_name: "4.4"
        variables:
          VERSION: "4.4"
      - id: "4.2"
        display_name: "4.2"
        variables:
          VERSION: "4.2"
      - id: "4.0"
        display_name: "4.0"
        variables:
          VERSION: "4.0"
      - id: "3.6"
        display_name: "3.6"
        variables:
          VERSION: "3.6"
      - id: "rapid"
        display_name: "rapid"
        variables:
          VERSION: "rapid"
      - id: "latest"
        display_name: "latest"
        variables:
          VERSION: "latest"

  # OSes that require >= 3.2 for SSL
  - id: os-ssl-32
    display_name: OS
    values:
      - id: "windows-64"
        display_name: "Windows 64-bit"
        run_on:
          - windows-vsCurrent-small
        variables:
          GCC_PATH: "/cygdrive/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin"
          GO_DIST: "C:\\golang\\go1.22"
          VENV_BIN_DIR: "Scripts"
          # CSOT tests are unreliable on our slow Windows hosts.
          SKIP_CSOT_TESTS: true
      - id: "rhel87-64"
        display_name: "RHEL 8.7"
        run_on: rhel8.7-large
        variables:
          GO_DIST: "/opt/golang/go1.22"
      - id: "macos"
        display_name: "MacOS 14.0"
        run_on: macos-14
        batchtime: 1440 # Run at most once per 24 hours.
        variables:
          GO_DIST: "/opt/golang/go1.22"
          # CSOT tests are unreliable on our slow macOS hosts.
          SKIP_CSOT_TESTS: true

  # OSes that require >= 4.0 for SSL
  - id: os-ssl-40
    display_name: OS
    values:
      - id: "windows-64"
        display_name: "Windows 64-bit"
        run_on:
          - windows-vsCurrent-small
        variables:
          GCC_PATH: "/cygdrive/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin"
          GO_DIST: "C:\\golang\\go1.22"
          VENV_BIN_DIR: "Scripts"
          # CSOT tests are unreliable on our slow Windows hosts.
          SKIP_CSOT_TESTS: true
      - id: "rhel87-64"
        display_name: "RHEL 8.7"
        run_on: rhel8.7-large
        variables:
          GO_DIST: "/opt/golang/go1.22"
      - id: "macos"
        display_name: "MacOS 14.0"
        run_on: macos-14
        batchtime: 1440 # Run at most once per 24 hours.
        variables:
          GO_DIST: "/opt/golang/go1.22"
          # CSOT tests are unreliable on our slow macOS hosts.
          SKIP_CSOT_TESTS: true

  - id: ocsp-rhel-87
    display_name: OS
    values:
      - id: "rhel87"
        display_name: "RHEL 8.7"
        run_on: rhel8.7-large
        variables:
          GO_DIST: "/opt/golang/go1.22"

  - id: os-aws-auth
    display_name: OS
    values:
      - id: "windows-64-vsCurrent-latest-small"
        display_name: "Windows 64-bit"
        run_on:
          - windows-vsCurrent-small
        variables:
          GCC_PATH: "/cygdrive/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin"
          GO_DIST: "C:\\golang\\go1.22"
          SKIP_ECS_AUTH_TEST: true
          # CSOT tests are unreliable on our slow Windows hosts.
          SKIP_CSOT_TESTS: true
      - id: "ubuntu2004-64"
        display_name: "Ubuntu 20.04"
        run_on: ubuntu2004-test
        variables:
          GO_DIST: "/opt/golang/go1.22"
      - id: "macos"
        display_name: "MacOS 14.0"
        run_on: macos-14
        batchtime: 1440 # Run at most once per 24 hours.
        variables:
          GO_DIST: "/opt/golang/go1.22"
          SKIP_ECS_AUTH_TEST: true
          SKIP_EC2_AUTH_TEST: true
          SKIP_WEB_IDENTITY_AUTH_TEST: true
          # CSOT tests are unreliable on our slow macOS hosts.
          SKIP_CSOT_TESTS: true

  - id: os-faas-80
    display_name: OS
    values:
      - id: "rhel87-large"
        display_name: "RHEL 8.7"
        run_on: rhel8.7-large
        variables:
          GO_DIST: "/opt/golang/go1.22"

  - id: os-serverless
    display_name: OS
    values:
      - id: "rhel87"
        display_name: "RHEL 8.7"
        run_on: rhel8.7-small
        variables:
          GO_DIST: "/opt/golang/go1.22"

task_groups:
  - name: serverless_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: setup-system
      - command: subprocess.exec
        params:
          binary: "bash"
          args: 
            - ${DRIVERS_TOOLS}/.evergreen/serverless/setup.sh
      - command: expansions.update
        params:
          file: serverless-expansion.yml
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            # Find the crypt_shared library file in the current directory and set the CRYPT_SHARED_LIB_PATH to
            # the path of that file. Only look for .so, .dll, or .dylib files to prevent matching any other
            # downloaded files.
            CRYPT_SHARED_LIB_PATH="$(find $(pwd) -maxdepth 1 -type f \
              -name 'mongo_crypt_v1.so' -o \
              -name 'mongo_crypt_v1.dll' -o \
              -name 'mongo_crypt_v1.dylib')"

            # If we're on Windows, convert the "cygdrive" path to Windows-style paths.
            if [ "Windows_NT" = "$OS" ]; then
                CRYPT_SHARED_LIB_PATH=$(cygpath -m $CRYPT_SHARED_LIB_PATH)
            fi

            echo "CRYPT_SHARED_LIB_PATH: $CRYPT_SHARED_LIB_PATH" >> crypt-expansion.yml

      # Load the expansion file to make an evergreen variable with the current unique version
      - command: expansions.update
        params:
          file: crypt-expansion.yml

    teardown_group:
      - command: subprocess.exec
        params:
          binary: "bash"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/serverless/teardown.sh
      - func: teardown
      - func: handle-test-artifacts
      
    tasks:
      - ".serverless"

  - name: testgcpkms_task_group
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: setup-system
      - command: subprocess.exec
        params:
          binary: "bash"
          args: 
            - ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/setup.sh
    teardown_group:
      - command: subprocess.exec
        params:
          binary: "bash"
          args: 
            - ${DRIVERS_TOOLS}/.evergreen/csfle/gcpkms/teardown.sh
      - func: teardown
      - func: handle-test-artifacts
    tasks:
      - testgcpkms-task

  - name: testazurekms_task_group
    setup_group_can_fail_task: true
    teardown_group_can_fail_task: true
    setup_group_timeout_secs: 1800 # 30 minutes
    setup_group:
      - func: setup-system
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            export AZUREKMS_VMNAME_PREFIX="GODRIVER"
            # Get azurekms credentials from the vault.
            . ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/setup-secrets.sh
            ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/create-and-setup-vm.sh
    teardown_group:
      - command: subprocess.exec
        params:
          binary: "bash"
          args: 
           - ${DRIVERS_TOOLS}/.evergreen/csfle/azurekms/teardown.sh
      - func: teardown
      - func: handle-test-artifacts
      
    tasks:
      - testazurekms-task

  - name: testoidc_task_group
    setup_group:
      - func: setup-system
      - func: assume-ec2-role
      - command: subprocess.exec
        params:
          binary: bash
          include_expansions_in_env: ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"]
          env:
            MONGODB_VERSION: "8.0"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/teardown.sh
      - func: teardown
      - func: handle-test-artifacts
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test

  - name: testazureoidc_task_group
    setup_group:
      - func: setup-system
      - command: subprocess.exec
        params:
          binary: bash
          env:
            AZUREOIDC_VMNAME_PREFIX: "GO_DRIVER"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/azure/teardown.sh
      - func: teardown
      - func: handle-test-artifacts
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-azure

  - name: testgcpoidc_task_group
    setup_group:
      - func: setup-system
      - command: subprocess.exec
        params:
          binary: bash
          env:
            AZUREOIDC_VMNAME_PREFIX: "GO_DRIVER"
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/gcp/setup.sh
    teardown_task:
      - command: subprocess.exec
        params:
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/auth_oidc/gcp/teardown.sh
      - func: teardown
      - func: handle-test-artifacts
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - oidc-auth-test-gcp

  - name: test-aws-lambda-task-group
    setup_group:
      - func: setup-system
      - command: subprocess.exec
        params:
          working_dir: src/go.mongodb.org/mongo-driver
          binary: bash
          env:
            LAMBDA_STACK_NAME: dbx-go-lambda
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/setup.sh
    teardown_group:
      - command: subprocess.exec
        params:
          working_dir: src/go.mongodb.org/mongo-driver
          binary: bash
          env:
            LAMBDA_STACK_NAME: dbx-go-lambda
            AWS_REGION: us-east-1
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/teardown.sh
      - func: teardown
      - func: handle-test-artifacts
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - test-aws-lambda-deployed

  - name: test-search-index-task-group
    setup_group:
      - func: setup-system
      - command: subprocess.exec
        params:
          working_dir: src/go.mongodb.org/mongo-driver
          binary: bash
          env:
            MONGODB_VERSION: "7.0"
            LAMBDA_STACK_NAME: dbx-go-lambda
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/setup.sh
      - command: expansions.update
        params:
          file: src/go.mongodb.org/mongo-driver/atlas-expansion.yml
      - command: shell.exec
        params:
          working_dir: src/go.mongodb.org/mongo-driver
          shell: bash
          script: |-
            echo "TEST_INDEX_URI: ${MONGODB_URI}" > atlas-expansion.yml
      - command: expansions.update
        params:
          file: src/go.mongodb.org/mongo-driver/atlas-expansion.yml
    teardown_group:
      - command: subprocess.exec
        params:
          working_dir: src/go.mongodb.org/mongo-driver
          binary: bash
          args:
            - ${DRIVERS_TOOLS}/.evergreen/atlas/teardown.sh
      - func: teardown
      - func: handle-test-artifacts
    setup_group_can_fail_task: true
    setup_group_timeout_secs: 1800
    tasks:
      - test-search-index

buildvariants:
  - name: static-analysis
    tags: ["pullrequest"]
    display_name: "Static Analysis"
    run_on:
      - rhel8.7-small
    expansions:
      # Keep this in sync with go version used in etc/golangci-lint.sh
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: ".static-analysis"

  - name: pull-request-helpers
    tags: ["pullrequest"]
    display_name: "Pull Request Helpers"
    run_on:
      - rhel8.7-small
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: "pull-request-helpers"

  - name: perf
    display_name: "Performance"
    run_on:
      - rhel8.7-large
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: ".performance"

  - name: build-check
    tags: ["pullrequest"]
    display_name: "Compile Only Checks"
    run_on:
      - rhel8.7-small
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: ".compile-check"

  - name: backport-pr
    display_name: "Backport PR"
    run_on:
      - rhel8.7-small
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks: 
      - name: "backport-pr"

  - name: atlas-test
    tags: ["pullrequest"]
    display_name: "Atlas test"
    run_on:
      - rhel8.7-large
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: "atlas-test"

  - name: atlas-data-lake-test
    tags: ["pullrequest"]
    display_name: "Atlas Data Lake Test"
    run_on:
      - ubuntu2004-large
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: "test-atlas-data-lake"

  - name: docker-runner-test
    tags: ["pullrequest"]
    display_name: "Docker Runner Test"
    run_on:
      - ubuntu2204-large
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: "test-docker-runner"

  - matrix_name: "tests-rhel-36-with-zlib-support"
    tags: ["pullrequest"]
    matrix_spec: { version: ["3.6"], os-ssl-32: ["rhel87-64"] }
    display_name: "${version} ${os-ssl-32}"
    tasks:
      - name: ".test !.enterprise-auth !.snappy !.zstd"

  - matrix_name: "tests-windows-36-with-zlib-support"
    matrix_spec: { version: ["3.6"], os-ssl-32: ["windows-64"] }
    display_name: "${version} ${os-ssl-32}"
    tasks:
      - name: ".test !.enterprise-auth !.snappy !.zstd"

  - matrix_name: "tests-rhel-40-with-zlib-support"
    tags: ["pullrequest"]
    matrix_spec: { version: ["4.0"], os-ssl-40: ["rhel87-64"] }
    display_name: "${version} ${os-ssl-40}"
    tasks:
      - name: ".test !.enterprise-auth !.snappy !.zstd"

  - matrix_name: "tests-windows-40-with-zlib-support"
    matrix_spec: { version: ["4.0"], os-ssl-40: ["windows-64"] }
    display_name: "${version} ${os-ssl-40}"
    tasks:
      - name: ".test !.enterprise-auth !.snappy !.zstd"

  - matrix_name: "tests-rhel-42-plus-zlib-zstd-support"
    tags: ["pullrequest"]
    matrix_spec: { version: ["4.2", "4.4", "5.0", "6.0", "7.0", "8.0"], os-ssl-40: ["rhel87-64"] }
    display_name: "${version} ${os-ssl-40}"
    tasks:
      - name: ".test !.enterprise-auth !.snappy"

  - matrix_name: "tests-windows-42-plus-zlib-zstd-support"
    matrix_spec: { version: ["4.2", "4.4", "5.0", "6.0", "7.0"], os-ssl-40: ["windows-64"] }
    display_name: "${version} ${os-ssl-40}"
    tasks:
      - name: ".test !.enterprise-auth !.snappy"

  - matrix_name: "tests-windows-80-zlib-zstd-support"
    tags: ["pullrequest"]
    matrix_spec: { version: ["8.0"], os-ssl-40: ["windows-64"] }
    display_name: "${version} ${os-ssl-40}"
    tasks:
      - name: ".test !.enterprise-auth !.snappy"

  - matrix_name: "tests-latest-zlib-zstd-support"
    matrix_spec: { version: ["latest"], os-ssl-40: ["windows-64", "rhel87-64"] }
    display_name: "${version} ${os-ssl-40}"
    tasks:
      - name: ".test !.enterprise-auth !.snappy"

  - matrix_name: "enterprise-auth-tests"
    matrix_spec: { os-ssl-32: "*" }
    display_name: "Enterprise Auth - ${os-ssl-32}"
    tasks:
      - name: ".test .enterprise-auth"

  - matrix_name: "aws-auth-test"
    matrix_spec: { version: ["4.4", "5.0", "6.0", "7.0", "8.0", "latest"], os-aws-auth: "*" }
    display_name: "MONGODB-AWS Auth ${version} ${os-aws-auth}"
    tasks:
      - name: "aws-auth-test"

  - matrix_name: "ocsp-test"
    matrix_spec: { version: ["4.4", "5.0", "6.0", "7.0", "8.0", "latest"], ocsp-rhel-87: ["rhel87"] }
    display_name: "OCSP ${version} ${ocsp-rhel-87}"
    batchtime: 20160 # Use a batchtime of 14 days as suggested by the OCSP test README
    tasks:
      - name: ".ocsp"

  - matrix_name: "ocsp-test-windows"
    matrix_spec: { version: ["4.4", "5.0", "6.0", "7.0", "8.0", "latest"], os-ssl-40: ["windows-64"] }
    display_name: "OCSP ${version} ${os-ssl-40}"
    batchtime: 20160 # Use a batchtime of 14 days as suggested by the OCSP test README
    tasks:
      # Windows MongoDB servers do not staple OCSP responses and only support RSA.
      - name: ".ocsp-rsa !.ocsp-staple"

  - matrix_name: "ocsp-test-macos"
    matrix_spec: { version: ["4.4", "5.0", "6.0", "7.0", "8.0", "latest"], os-ssl-40: ["macos"] }
    display_name: "OCSP ${version} ${os-ssl-40}"
    batchtime: 20160 # Use a batchtime of 14 days as suggested by the OCSP test README
    tasks:
      # macos MongoDB servers do not staple OCSP responses and only support RSA.
      - name: ".ocsp-rsa !.ocsp-staple"

  - matrix_name: "race-test"
    tags: ["pullrequest"]
    matrix_spec: { version: ["7.0"], os-ssl-40: ["rhel87-64"] }
    display_name: "Race Detector Test"
    tasks:
      - name: ".race"

  - matrix_name: "versioned-api-test"
    tags: ["pullrequest"]
    matrix_spec: { version: ["5.0", "6.0", "7.0", "8.0"], os-ssl-40: ["windows-64", "rhel87-64"] }
    display_name: "API Version ${version} ${os-ssl-40}"
    tasks:
      - name: ".versioned-api"

  - matrix_name: "versioned-api-latest-test"
    matrix_spec: { version: ["latest"], os-ssl-40: ["windows-64", "rhel87-64"] }
    display_name: "API Version ${version} ${os-ssl-40}"
    tasks:
      - name: ".versioned-api"

  - matrix_name: "kms-tls-test"
    matrix_spec: { version: ["7.0"], os-ssl-40: ["rhel87-64"] }
    display_name: "KMS TLS ${os-ssl-40}"
    tasks:
      - name: ".kms-tls"

  - matrix_name: "load-balancer-test"
    tags: ["pullrequest"]
    matrix_spec: { version: ["5.0", "6.0", "7.0", "8.0"], os-ssl-40: ["rhel87-64"] }
    display_name: "Load Balancer Support ${version} ${os-ssl-40}"
    tasks:
      - name: ".load-balancer"

  - matrix_name: "load-balancer-latest-test"
    matrix_spec: { version: ["latest"], os-ssl-40: ["rhel87-64"] }
    display_name: "Load Balancer Support ${version} ${os-ssl-40}"
    tasks:
      - name: ".load-balancer"

  - matrix_name: "serverless"
    tags: ["pullrequest"]
    matrix_spec: { os-serverless: "*" }
    display_name: "Serverless ${os-serverless}"
    tasks:
      - "serverless_task_group"

  - matrix_name: "kms-kmip-test"
    matrix_spec: { version: ["7.0"], os-ssl-40: ["rhel87-64"] }
    display_name: "KMS KMIP ${os-ssl-40}"
    tasks:
      - name: ".kms-kmip"

  - matrix_name: "fuzz-test"
    matrix_spec: { version: ["5.0"], os-ssl-40: ["rhel87-64"] }
    display_name: "Fuzz ${version} ${os-ssl-40}"
    tasks:
      - name: "test-fuzz"
        batchtime: 1440 # Run at most once per 24 hours.

  - matrix_name: "faas-test"
    matrix_spec: { version: ["7.0"], os-faas-80: ["rhel87-large"] }
    display_name: "FaaS ${version} ${os-faas-80}"
    tasks:
      - test-aws-lambda-task-group

  - matrix_name: "searchindex-test"
    matrix_spec: { version: ["7.0"], os-faas-80: ["rhel87-large"] }
    display_name: "Search Index ${version} ${os-faas-80}"
    tasks:
      - test-search-index-task-group

  - name: testgcpkms-variant
    display_name: "GCP KMS"
    run_on:
      - rhel8.7-small
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: testgcpkms_task_group
        batchtime: 20160 # Use a batchtime of 14 days as suggested by the CSFLE test README
      - testgcpkms-fail-task

  - name: testawskms-variant
    display_name: "AWS KMS"
    run_on:
      - rhel8.7-small
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - testawskms-task
      - testawskms-fail-task

  - name: testazurekms-variant
    display_name: "AZURE KMS"
    run_on:
      - rhel8.7-small
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: testazurekms_task_group
        batchtime: 20160 # Use a batchtime of 14 days as suggested by the CSFLE test README
      - testazurekms-fail-task

  - name: testoidc-variant
    display_name: "OIDC"
    run_on:
      - ubuntu2204-small
    expansions:
      GO_DIST: "/opt/golang/go1.22"
    tasks:
      - name: testoidc_task_group
        batchtime: 20160 # Use a batchtime of 14 days as suggested by the CSFLE test README
      - name: testazureoidc_task_group
        batchtime: 20160 # Use a batchtime of 14 days as suggested by the CSFLE test README
      - name: testgcpoidc_task_group
        batchtime: 20160 # Use a batchtime of 14 days as suggested by the CSFLE test README
