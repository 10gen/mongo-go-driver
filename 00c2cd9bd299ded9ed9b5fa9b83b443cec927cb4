{
  "comments": [
    {
      "key": {
        "uuid": "d170ede5_1ae6743f",
        "filename": "x/mongo/driver/batch_cursor.go",
        "patchSetId": 8
      },
      "lineNbr": 119,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "How can this case happen? If there is a limit or batchSize on the initial find operation, the minimum of the two (with some extra logic for negative limits) should be sent as the numberToReturn field on the OP_QUERY.",
      "range": {
        "startLine": 119,
        "startChar": 22,
        "endLine": 119,
        "endChar": 47
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a24b79d_61622096",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 8
      },
      "lineNbr": 118,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "minimum",
      "range": {
        "startLine": 118,
        "startChar": 49,
        "endLine": 118,
        "endChar": 56
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47c78872_b1fe0d64",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 8
      },
      "lineNbr": 128,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "I know this code was already here, but are you opposed to renaming this to ClientSession or Session? It\u0027s a nit, but this confuses me every time I see it because I think it\u0027s a mongo Client.",
      "range": {
        "startLine": 128,
        "startChar": 1,
        "endLine": 128,
        "endChar": 7
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67f22930_a445555d",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 8
      },
      "lineNbr": 308,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "Can you explain why this is has to be here instead of being consolidated into the WriteCommandError logic below?",
      "range": {
        "startLine": 308,
        "startChar": 2,
        "endLine": 308,
        "endChar": 12
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "433e6bb0_cc943dbb",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 8
      },
      "lineNbr": 309,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "I think we need to call publishFinishedEvent even if we\u0027re retrying. The retry will generate a new CommandStartedEvent, which will need its own corresponding finished event.",
      "range": {
        "startLine": 309,
        "startChar": 3,
        "endLine": 309,
        "endChar": 65
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39175b69_b90375a0",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 8
      },
      "lineNbr": 333,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "Can we return ErrUnacknowledgedWrite here? Also, how is this going to work for batch splitting? As far as I understand, this will break out of the loop after writing the first batch.",
      "range": {
        "startLine": 333,
        "startChar": 4,
        "endLine": 333,
        "endChar": 9
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b607c83_2b61c0e6",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 8
      },
      "lineNbr": 472,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "I think we need to discuss how we\u0027re going to handle unacknowledged writes for OP_QUERY. Per yesterday\u0027s conversation with @jeff, we shouldn\u0027t be calling ReadWireMessage synchronously for that case.",
      "range": {
        "startLine": 472,
        "startChar": 1,
        "endLine": 472,
        "endChar": 46
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "873e9a51_d18f2ce4",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 8
      },
      "lineNbr": 695,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "Can we make this an int32 in the Operation struct? Not a big deal, but if it\u0027s not used anywhere else, this code would be a little cleaner without the cast. Similar comment for MinimumWriteConcernWireVersion.",
      "range": {
        "startLine": 695,
        "startChar": 108,
        "endLine": 695,
        "endChar": 137
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91ba7b57_85d4c282",
        "filename": "x/mongo/driver/operation/find.go",
        "patchSetId": 8
      },
      "lineNbr": 109,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "Why the extra blank lines?",
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a107518_2dda2e64",
        "filename": "x/mongo/driver/operation/find.go",
        "patchSetId": 8
      },
      "lineNbr": 200,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "For consistency throughout the code base, I think we should either remove these checks or add corresponding checks to the options code. It doesn\u0027t make sense to me to have them in one set of builders but not another.",
      "range": {
        "startLine": 197,
        "startChar": 1,
        "endLine": 200,
        "endChar": 0
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6af5df1_60f2cde2",
        "filename": "x/mongo/driver/operation/insert.go",
        "patchSetId": 8
      },
      "lineNbr": 48,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-05-10T14:54:16Z",
      "side": 1,
      "message": "Can this function be private?",
      "range": {
        "startLine": 48,
        "startChar": 5,
        "endLine": 48,
        "endChar": 22
      },
      "revId": "00c2cd9bd299ded9ed9b5fa9b83b443cec927cb4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}