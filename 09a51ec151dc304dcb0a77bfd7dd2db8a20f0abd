{
  "comments": [
    {
      "key": {
        "uuid": "10b8cfcb_40344833",
        "filename": "core/topology/cursor.go",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-09-07T15:24:32Z",
      "side": 1,
      "message": "But it doesn\u0027t :) Perhaps down the line it does when getting a connection. Can you confirm and, if so, let\u0027s get rid of this comment.\n\nIt would also be nice to have a test that proves that we\u0027ll eventually abort if the context is cancelled.\n\nAlso, this is partly about tailable cursors. We should probably have some tests for those as well. Maybe that\u0027s another ticket though.",
      "revId": "09a51ec151dc304dcb0a77bfd7dd2db8a20f0abd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "329ea094_22a3e5b9",
        "filename": "core/topology/cursor.go",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-09-10T13:42:34Z",
      "side": 1,
      "message": "I agree about the last point. This is easily integration-tested with a tailable cursor, so we should take the opportunity to write that test.  Also easy to test context cancellation with a tailable cursor.",
      "parentUuid": "10b8cfcb_40344833",
      "revId": "09a51ec151dc304dcb0a77bfd7dd2db8a20f0abd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91668cfa_c4cbcf94",
        "filename": "core/topology/cursor.go",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1014927
      },
      "writtenOn": "2018-09-10T14:22:06Z",
      "side": 1,
      "message": "Just added two tests, but I\u0027m not sure if they are what you expected. The context cancellation test I\u0027m sure of, since it works with the small mock connections. Is the tailable cursor test actually sufficient though? I\u0027m not sure what such a test should look like, beyond setting the TAILABLE option. Can you let me know what you think?",
      "parentUuid": "329ea094_22a3e5b9",
      "revId": "09a51ec151dc304dcb0a77bfd7dd2db8a20f0abd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cb754ab_906cf656",
        "filename": "core/topology/cursor.go",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-09-12T13:13:08Z",
      "side": 1,
      "message": "I don\u0027t think the new mock tests added in patch set 4 test anything more than TestCursorLoopsUntilDocAvailable does, as the Cursor doesn\u0027t appear to use the Tailable option (Tailable is something passed to the find command, not getMore)\n\nI would prefer an integration test (which means testing against a MongoDB server rather than a mock).  Something like this Java driver test: https://github.com/mongodb/mongo-java-driver/blob/66e8e79fc2ffeec8275134d2a3538dd013913272/driver-core/src/test/functional/com/mongodb/operation/QueryBatchCursorFunctionalSpecification.groovy#L190-L235\n\n@Craig, what do you think?",
      "parentUuid": "91668cfa_c4cbcf94",
      "revId": "09a51ec151dc304dcb0a77bfd7dd2db8a20f0abd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2bf8d09_30cc466f",
        "filename": "core/topology/cursor.go",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-09-12T13:30:06Z",
      "side": 1,
      "message": "I think writing the integration test would be nice to have. It\u0027s gonna be a little racy, but as long as it passes, I think we are getting some value out of it even if it only hits to condition 4 out 5 times.",
      "parentUuid": "3cb754ab_906cf656",
      "revId": "09a51ec151dc304dcb0a77bfd7dd2db8a20f0abd",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}