{
  "comments": [
    {
      "key": {
        "uuid": "8c2f1e45_edef0d82",
        "filename": "core/result/result.go",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-04-24T16:24:01Z",
      "side": 1,
      "message": "does it make sense to make this a pointer?",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48ae6e21_c9f8a211",
        "filename": "core/result/result.go",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-24T16:45:19Z",
      "side": 1,
      "message": "On successful inserts, this will be nil.",
      "parentUuid": "8c2f1e45_edef0d82",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00f8b55f_0cf8692b",
        "filename": "core/result/result.go",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-24T16:45:19Z",
      "side": 1,
      "message": "How would people access this? Is there a reason this needs to be a struct instead of just an []interface{}",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3c9a362_bd54918d",
        "filename": "core/result/result.go",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-24T17:34:19Z",
      "side": 1,
      "message": "People need to access the ID field, and importantly we need to unmarshal it properly. This will ensure that users can get to the ID fields.",
      "parentUuid": "00f8b55f_0cf8692b",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba3157f9_21dd00a1",
        "filename": "core/result/result.go",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-24T18:05:25Z",
      "side": 1,
      "message": "Sure, but how would I, as a user, go about passing this \"list\" of identifiers somewhere else? For example, since it\u0027s an anonymous struct, I have to do something with it before passing it somewhere, like transfer it to my own struct/array. Should you name this instead?",
      "parentUuid": "a3c9a362_bd54918d",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f52e6c7d_6a35200f",
        "filename": "core/result/result.go",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-04-24T20:03:09Z",
      "side": 1,
      "message": "you can range over Update.Upserted, so this doesn\u0027t feel substantively different than what I\u0027d expect. I think it feels slightly weird to strip out the keys of these documents.",
      "parentUuid": "ba3157f9_21dd00a1",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ebc786b_05c821d7",
        "filename": "core/result/result.go",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-24T21:02:57Z",
      "side": 1,
      "message": "Yeah something like this:\n\nvar update result.Update \u003d ...\nfor _, upserted :\u003d range update.Upserted {\n     id :\u003d upserted.ID\n     ....\n}",
      "parentUuid": "f52e6c7d_6a35200f",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d40935a0_85e2c6f9",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-04-24T16:24:01Z",
      "side": 1,
      "message": "is it possible to refactor some or all of these switch statement out?",
      "range": {
        "startLine": 95,
        "startChar": 1,
        "endLine": 95,
        "endChar": 7
      },
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66103083_64dac534",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-24T21:02:57Z",
      "side": 1,
      "message": "Factored this out into a function.",
      "parentUuid": "d40935a0_85e2c6f9",
      "range": {
        "startLine": 95,
        "startChar": 1,
        "endLine": 95,
        "endChar": 7
      },
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42475bde_a14454c1",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-24T16:45:19Z",
      "side": 1,
      "message": "Why are we raising an unacknowledged write error?",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8b4164f_9159a4a2",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-24T17:34:19Z",
      "side": 1,
      "message": "We don\u0027t raise it, it\u0027s if we get it. The reason we need this is to signal to the user that the result they get isn\u0027t a response from the database.",
      "parentUuid": "42475bde_a14454c1",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c23d34c4_b2982619",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-04-24T20:03:09Z",
      "side": 1,
      "message": "but we are propagating the error. on the next line. I think it makes sense to have the error value for these cases be nil, regardless.",
      "parentUuid": "b8b4164f_9159a4a2",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0547a5d5_2c4d60d3",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-24T21:02:57Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean here. All this case does is check if we did an unacknowledged write, if we did, we inform the user and return to them the ID of the document the inserted since we generate that.",
      "parentUuid": "c23d34c4_b2982619",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b241365b_d1128786",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-24T21:53:30Z",
      "side": 1,
      "message": "He means that the dispatch.ErrUnacknowledgedWrite is still propagating out even thought it has been \"handled\". Why is it important for someone to know that the response was manufactured? The requested this behavior with the write concern.",
      "parentUuid": "0547a5d5_2c4d60d3",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b767472_604e31e2",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-24T16:45:19Z",
      "side": 1,
      "message": "1) If we have more than one write error, it appears that we are going to return success (default). Obviously, this is a single InsertOne, but who knows what may happen.\n\n2) What if there is also a WriteConcernError? Do we trash it? In the multiple write scenario, it could be that one of many errored, and the others were never replicated.\n\n3) (Again for multi writes), what if some writes succeeded and some failed? We need the user to know about each information separately.",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d224fae_3cb2e686",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-24T17:34:19Z",
      "side": 1,
      "message": "We have to choose, since the CRUD spec says we can only return a WriteError or a WriteConcernError, and I\u0027m assuming that the server doesn\u0027t return both. We can return the InsertOneResult and the WriteError when an error occurs, but that might be confusing. It might make more sense for the *Many write types.",
      "parentUuid": "8b767472_604e31e2",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b5f1b14_9d1647f0",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-24T18:05:25Z",
      "side": 1,
      "message": "Yeah, these comments were mostly in the context of the *Many types. It\u0027s something you need to figure out. Returning both an instance and an error is weird I think. I believe there are already other examples in this source set (DocumentResult I think) where you don\u0027t return an error, but return the result and let them check on that whether there was an error.",
      "parentUuid": "7d224fae_3cb2e686",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f82a633e_953caee5",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-04-24T20:03:09Z",
      "side": 1,
      "message": "I think it\u0027s reasonable to return an error and a value for the *Many reports (as this is really just propagating the admittedly weird result from MongoDB,) but we ought to document this pretty clearly.",
      "parentUuid": "5b5f1b14_9d1647f0",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4c5b4be_0c11b6c3",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-24T21:02:57Z",
      "side": 1,
      "message": "Is it even possible to get both a WriteConcernError and a WriteError? There is only ever a single WriteConcernError, so for the *Many cases we wouldn\u0027t have any way to know which write the WriteConcernError was for.",
      "parentUuid": "f82a633e_953caee5",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fa9b873_b9af5275",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-04-24T21:51:57Z",
      "side": 1,
      "message": "Definitely possible.  Consider a bulk write with ordered : false.  The nth write could fail with a write error, and then the rest could fail to replicate with a write concern error.",
      "parentUuid": "e4c5b4be_0c11b6c3",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6885b4b3_a696d6d2",
        "filename": "mongo/collection.go",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-24T21:53:30Z",
      "side": 1,
      "message": "Yes, a single WriteConcernError and one or more WriteErrors can co-exist.\n\nThe WriteConcernError is for the whole thing.",
      "parentUuid": "e4c5b4be_0c11b6c3",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cca92ae6_2e60af2b",
        "filename": "mongo/errors.go",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-24T16:45:19Z",
      "side": 1,
      "message": "Why not check to see if it\u0027s just one and return it; otherwise do the combination. That way, you can call this function without needing to check whether there are more than 1 error, since it seems that is always done from the callsites.",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9864bdf_a3a16ae0",
        "filename": "mongo/errors.go",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-24T17:34:19Z",
      "side": 1,
      "message": "We could instead just always return mongo.WriteErrors even when there\u0027s only a single error, but I don\u0027t think that\u0027s in line with the CRUD spec.",
      "parentUuid": "cca92ae6_2e60af2b",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5ba4049_94ae0787",
        "filename": "mongo/errors.go",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-24T21:02:57Z",
      "side": 1,
      "message": "Changed the collection methods to always return a mongo.WriteErrors even when there is only a single one.",
      "parentUuid": "f9864bdf_a3a16ae0",
      "revId": "10acbfc54852da3c1c087caf65256b2fff872fc1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}