{
  "comments": [
    {
      "key": {
        "uuid": "c228744c_25ade586",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-06-14T16:01:50Z",
      "side": 1,
      "message": "isn\u0027t the whole point of these methods that they avoid needing to import the core/options package? if people need to import options to make aggreation options, then this reduces the utility of this interface.",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b001a514_2dd97000",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-06-14T16:08:46Z",
      "side": 1,
      "message": "I think this is supposed to be changed to mongoopt.Collation when we implement the mongoopt package. option.Collation is a placeholder for now.",
      "parentUuid": "c228744c_25ade586",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "117c7e3a_cc6103a9",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-06-13T23:28:04Z",
      "side": 1,
      "message": "why isn\u0027t this a method on AggregateBundle?",
      "range": {
        "startLine": 117,
        "startChar": 5,
        "endLine": 117,
        "endChar": 17
      },
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "851062da_9837d86f",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1014457
      },
      "writtenOn": "2018-06-14T14:54:02Z",
      "side": 1,
      "message": "Probably just a matter of style preference, but if we make the map values bool this if statement simplifies to just `if optionsSet[optionType] {`, which improves readability for only a marginal space cost.  The Go Programming Language book prefers doing it this way.",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3ea8d95_53b9f5b6",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-06-14T15:17:45Z",
      "side": 1,
      "message": "Yeah, mostly a style preference. I think overall that this is slightly clearer because you don\u0027t have to reference the optionsSet declaration to figure out what\u0027s going on. I lean slightly toward this style over setting and using the value.",
      "parentUuid": "851062da_9837d86f",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7552a081_6a4aa22e",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1014457
      },
      "writtenOn": "2018-06-14T15:21:17Z",
      "side": 1,
      "message": "ok, we\u0027ll keep it this way then.",
      "parentUuid": "b3ea8d95_53b9f5b6",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91c3783d_e24de81f",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-06-13T23:28:04Z",
      "side": 1,
      "message": "see above about making this mostly private.",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed94679e_8f260ed0",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1014457
      },
      "writtenOn": "2018-06-14T14:54:02Z",
      "side": 1,
      "message": "Currently making this private causes go to complain because the option functions are exported (e.g. func Comment(s string) OptComment, etc.) and so need to return an exported type.  Do you have any suggestions as to how we might be able to avoid this problem?",
      "parentUuid": "91c3783d_e24de81f",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15f97189_537bed1d",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-06-14T15:17:45Z",
      "side": 1,
      "message": "Returning a private type from a public function is an antipattern and defining interfaces for each of the different combinations of interfaces that an option could satisfy is difficult to maintain. The comment here does not need be updated, as we should describe what the option is. I think this is mostly copied from the previous implementation of options where these were the comments.",
      "parentUuid": "ed94679e_8f260ed0",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "517bab1e_83321b1b",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-06-14T16:01:50Z",
      "side": 1,
      "message": "I\u0027m not suggesting a private type, I\u0027m suggesting a private implementation of a public interface. \n\nso:\n\nfunc Comment(s string) Aggregate {}\nfunc Hint(h interface{}) Aggregate {} \n\nand so forth, and then OptHint and OptComment can be private. I don\u0027t think users actually need to know about these types, and can\u0027t meaningfully use them (I think?)",
      "parentUuid": "15f97189_537bed1d",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5967f43a_51c60555",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1014457
      },
      "writtenOn": "2018-06-14T16:19:34Z",
      "side": 1,
      "message": "Oh, I see, yeah I agree with Sam\u0027s point - users can\u0027t meaningfully use these types (and really shouldn\u0027t) so this would provide a good way of masking them while still providing the requisite functionality",
      "parentUuid": "517bab1e_83321b1b",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ba0957b_549598b1",
        "filename": "mongo/aggregateopt/aggregateopt.go",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-06-14T18:19:34Z",
      "side": 1,
      "message": "That only works for a package that has a single interface, e.g. Aggregate, Count, etc... For ones that cover multiple interfaces, e.g. findopt, there would need to be an intersecting interface that covers all of the interface a particular option is valid for, e.g. insertopt.ManyOne, findopt.OneFind, findopt.DeleteOneReplaceOneUpdateOne. I don\u0027t find these interfaces to be particularly useful, nor do I find returning a public type to be problematic. They should be documented better, though.",
      "parentUuid": "5967f43a_51c60555",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53b1cb86_3ba2fc72",
        "filename": "mongo/aggregateopt/aggregateopt_test.go",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-06-13T23:28:04Z",
      "side": 1,
      "message": "seems like we should just use testify for these helper functions, we\u0027re going to have to duplicate them for each options package.",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32ff2f87_31be904c",
        "filename": "mongo/aggregateopt/aggregateopt_test.go",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-06-14T15:17:45Z",
      "side": 1,
      "message": "Testify rewrites Go test output which messes with tools. The GODRIVER-251 epic is eventually what we will write. For now, we could put these in the testutils package.",
      "parentUuid": "53b1cb86_3ba2fc72",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baa42fb8_a5e0a253",
        "filename": "mongo/aggregateopt/aggregateopt_test.go",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1014457
      },
      "writtenOn": "2018-06-14T15:21:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "32ff2f87_31be904c",
      "revId": "2351dd6e80632fd41cb8684df144d308ce8ca11a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}