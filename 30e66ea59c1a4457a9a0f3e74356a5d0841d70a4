{
  "comments": [
    {
      "key": {
        "uuid": "682dd5cb_89c2cc37",
        "filename": "mongo/batch_cursor.go",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-01-29T21:05:49Z",
      "side": 1,
      "message": "Add a comment here for consistency.",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 28,
        "endChar": 6
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fd22461_05dbb799",
        "filename": "mongo/batch_cursor.go",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-01-30T19:30:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "682dd5cb_89c2cc37",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 28,
        "endChar": 6
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6744b754_c82fc736",
        "filename": "mongo/cursor.go",
        "patchSetId": 6
      },
      "lineNbr": 129,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-01-29T21:05:49Z",
      "side": 1,
      "message": "The comment says \"The document will be appended to dst.\" but this doesn\u0027t happen. Also, why are we appending to the dst slice and returning the raw bytes? Is there a use case that would require both?",
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b65296f_899f186d",
        "filename": "mongo/cursor.go",
        "patchSetId": 6
      },
      "lineNbr": 129,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-01-30T19:30:20Z",
      "side": 1,
      "message": "That\u0027s a mistake, we should be appending the doc to bytes here. Also, you\u0027re right, it makes sense to just return a []byte here. The idea here is that instead of us continuously allocating new slices of bytes we allow the user to recycle a slice.\n\nWe definitely want to copy here so users don\u0027t retain something we\u0027re reusing.",
      "parentUuid": "6744b754_c82fc736",
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8bac8f7_411e9793",
        "filename": "mongo/cursor_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-01-29T21:05:49Z",
      "side": 1,
      "message": "Will these tests be filled out before merging this patch?",
      "range": {
        "startLine": 1,
        "startChar": 8,
        "endLine": 1,
        "endChar": 13
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9116db2_24a41ac8",
        "filename": "mongo/cursor_test.go",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-01-30T19:30:20Z",
      "side": 1,
      "message": "No, but I wanted to keep these tests here so that when we do GODRIVER-794 we cover the test cases that the previous cursor type had.",
      "parentUuid": "d8bac8f7_411e9793",
      "range": {
        "startLine": 1,
        "startChar": 8,
        "endLine": 1,
        "endChar": 13
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "934bb3eb_6262b95a",
        "filename": "mongo/database.go",
        "patchSetId": 6
      },
      "lineNbr": 254,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-01-29T21:05:49Z",
      "side": 1,
      "message": "In what case does driver.ListCollections return ErrEmptyCursor?",
      "range": {
        "startLine": 254,
        "startChar": 10,
        "endLine": 254,
        "endChar": 24
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68171c23_3c855f85",
        "filename": "mongo/database.go",
        "patchSetId": 6
      },
      "lineNbr": 254,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-01-30T19:30:20Z",
      "side": 1,
      "message": "Oh, I guess it doesn\u0027t, it\u0027s just list indexes that does.",
      "parentUuid": "934bb3eb_6262b95a",
      "range": {
        "startLine": 254,
        "startChar": 10,
        "endLine": 254,
        "endChar": 24
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8173fe9f_474ffbd2",
        "filename": "x/mongo/driver/aggregate.go",
        "patchSetId": 6
      },
      "lineNbr": 129,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-01-29T21:05:49Z",
      "side": 1,
      "message": "Why this change? We were successfully running aggregates against server versions \u003c 3.2 before, no?",
      "range": {
        "startLine": 129,
        "startChar": 4,
        "endLine": 129,
        "endChar": 8
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44c7a08a_d6c2869c",
        "filename": "x/mongo/driver/aggregate.go",
        "patchSetId": 6
      },
      "lineNbr": 129,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-01-30T19:30:20Z",
      "side": 1,
      "message": "There isn\u0027t a getMore command before 3.2 so we need to use OP_GET_MORE which requires we build a BatchCursor that does that.",
      "parentUuid": "8173fe9f_474ffbd2",
      "range": {
        "startLine": 129,
        "startChar": 4,
        "endLine": 129,
        "endChar": 8
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03accfa9_9176b6f0",
        "filename": "x/mongo/driver/batch_cursor.go",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2019-01-30T00:09:44Z",
      "side": 1,
      "message": "Am I understanding correctly, that to decode a batch of documents, the driver will\n\n1. Read bytes off the wire into a slice\n2. Copy bytes into bsoncore.Document (maybe that\u0027s the same underlying array as in step 1?)\n3. Append the bytes of each document in the batch into BatchCursor.currentBatch\n4. Append the bytes from BatchCursor.CurrentBatch into dst\n\nIs there a different design that removes the need for copies 3 and 4 and, if so, is it worth exploring? My concern is that, as this is a public API, we will trouble extricating ourselves if it proves that the extra byte copying is causing performance issues for our users.",
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0d6cd71_87dda047",
        "filename": "x/mongo/driver/batch_cursor.go",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-01-30T19:30:20Z",
      "side": 1,
      "message": "We have to do copies between API boundaries or people might accidentally hold on to slices that will be reused. At this point we don\u0027t really have a way to avoid the copies we\u0027re doing since that would require a redesign of the lower libraries in the driver. Depending on what design we wind up with for the driver library we might do something more like this:\n\n1. Read wiremessage off wire into a slice BatchCursor provides\n2. Process that wiremessage and mark where each document is in that slice of bytes\n3. Append the documents of the batch to dst in this method.\n\nAt the minimum though, we need to do a copy when we move from our API space to the caller\u0027s.",
      "parentUuid": "03accfa9_9176b6f0",
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09375778_6835a310",
        "filename": "x/mongo/driver/batch_cursor.go",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2019-01-30T20:59:13Z",
      "side": 1,
      "message": "I have a separate questions about this API. I understand this is the same idea that bsoncore has for building up documents, but I\u0027m concerned that\u0027s not the expected behavior here.\n\n1. Since you are providing the number of RequiredBytes(), I\u0027d expect a user to provide a dst that has already allocated all those bytes and you simply copy into them. If we are just appending, I don\u0027t think there is any need for RequiredBytes().\n\n2. When are we going to be appending Batches to anything else? I don\u0027t see the need for appending a batch onto something else.",
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f01595e_7b14e0a2",
        "filename": "x/mongo/driver/batch_cursor.go",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-01-30T21:35:51Z",
      "side": 1,
      "message": "1. I want to avoid copying because that means we\u0027ll have to return an error. Users can use RequiredBytes to ensure that the slice has enough capacity, and then pass it to Batch and we\u0027ll append the bytes to it. It also means that users can drain and entire cursor into a slice if so desired without needing a new special API.\n\n2. I don\u0027t think there\u0027s a reason to make this API more restrictive here. We made an entire API that relied on lengths and passing in a slice that was filled in, and it became unwieldy.\n\nIf you think people will actually require explicit copy behavior (like they want to copy into the middle of a slice but not chance reallocing the end of the slice), then we can add a CopyBatch method. If we wanted to be super specific we could have Batch, AppendBatch, and CopyBatch.",
      "parentUuid": "09375778_6835a310",
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fe309a7_a89b7b63",
        "filename": "x/mongo/driver/batch_cursor.go",
        "patchSetId": 6
      },
      "lineNbr": 175,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2019-01-31T14:36:46Z",
      "side": 1,
      "message": "This thread is getting pretty complicated, and is more about the design than the implementation.  I think we should discuss in person.",
      "parentUuid": "2f01595e_7b14e0a2",
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a3dedb0_77b0387c",
        "filename": "x/network/command/count_documents.go",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2019-01-29T21:05:49Z",
      "side": 1,
      "message": "Remove debugging statement.",
      "range": {
        "startLine": 68,
        "startChar": 6,
        "endLine": 68,
        "endChar": 13
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e860ebc_37c49c20",
        "filename": "x/network/command/count_documents.go",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-01-30T19:30:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a3dedb0_77b0387c",
      "range": {
        "startLine": 68,
        "startChar": 6,
        "endLine": 68,
        "endChar": 13
      },
      "revId": "30e66ea59c1a4457a9a0f3e74356a5d0841d70a4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}