{
  "comments": [
    {
      "key": {
        "uuid": "a57e8e36_49afd3e9",
        "filename": "mongo/collection.go",
        "patchSetId": 18
      },
      "lineNbr": 45,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "Can we not get the read/write selectors from db?",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9cdfff0_40ba2f00",
        "filename": "mongo/collection.go",
        "patchSetId": 18
      },
      "lineNbr": 45,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "We can, I\u0027m not entire sure why these are set here, but this is what the previous implementation did.\n\nGODRIVER-330",
      "parentUuid": "a57e8e36_49afd3e9",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bf3322f_5914714d",
        "filename": "mongo/collection.go",
        "patchSetId": 18
      },
      "lineNbr": 348,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "There can only be 1 upserted document by definition. As in, update all these documents - if you don\u0027t find any, insert one \u003c- upserted document.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3f67cac_f3f9273e",
        "filename": "mongo/collection.go",
        "patchSetId": 18
      },
      "lineNbr": 348,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "I didn\u0027t realize when I wrote this that we only accept a single update and filter, which means the server will only return one thing here.",
      "parentUuid": "5bf3322f_5914714d",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66b6e9dd_e7c90363",
        "filename": "mongo/collection.go",
        "patchSetId": 18
      },
      "lineNbr": 419,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "How does this work when $out is present? There are no results, so is it an empty cursor?",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfe10a4d_b8d3065a",
        "filename": "mongo/collection.go",
        "patchSetId": 18
      },
      "lineNbr": 419,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Yeah, the CursorBuilder would build an empty cursor in this case.",
      "parentUuid": "66b6e9dd_e7c90363",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a229a49_f64aaef1",
        "filename": "mongo/collection.go",
        "patchSetId": 18
      },
      "lineNbr": 529,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "Why doesn\u0027t this return a DocumentResult and an error? Most methods seem to return a result and an error (Cursor, err) ([]interface{}, error), etc...",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb82e94c_3949bef6",
        "filename": "mongo/collection.go",
        "patchSetId": 18
      },
      "lineNbr": 529,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "This is actually borrowed from the database/sql package, where the sql.Row type is returned from a QueryRow call. In the case of a QueryRow call, only the sql.Row object is returned and the sql.Row object proxies the error. The usage looks like this:\n\n    err :\u003d db.QueryRow(\"SELECT * FROM foo\").Scan(...)\n\nSimilarly, for FindOne it would be:\n\n    err :\u003d coll.FindOne(ctx, ...).Decode(\u0026res)\n\nThis makes it so users don\u0027t have to do extra error checking. If FindOne returned both a DocumentResult and en error the code would be:\n\n    dr, err :\u003d coll.FindOne(ctx, ...)\n    if err !\u003d nil { // do something }\n    err \u003d dr.Decode(\u0026res)",
      "parentUuid": "1a229a49_f64aaef1",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1934bf91_e6607da9",
        "filename": "mongo/database.go",
        "patchSetId": 18
      },
      "lineNbr": 46,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "can this be topology.WriteSelector()? It doesn\u0027t make a lot of sense to use a ReadPrefSelector for writes.\n\n(other places as well)",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ce6c9ab_84058ce1",
        "filename": "mongo/database.go",
        "patchSetId": 18
      },
      "lineNbr": 46,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-04-04T14:59:22Z",
      "side": 1,
      "message": "Agreed.  The rules are subtly different for writing and reading from primary.  In particular, read preference is ignored for \"direct\" connections, so you can read from a direct connection to a secondary even if the read preference is primary.",
      "parentUuid": "1934bf91_e6607da9",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab94efe6_f3982bc6",
        "filename": "mongo/database.go",
        "patchSetId": 18
      },
      "lineNbr": 46,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "I was confused by this as well. This is how it was so I left it, but it does seem like something we should change.\n\nGODRIVER-331.",
      "parentUuid": "1934bf91_e6607da9",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1c51445_c97164c2",
        "filename": "mongo/database.go",
        "patchSetId": 18
      },
      "lineNbr": 75,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "just use db.writeSelector.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6122ef6d_e1105a9c",
        "filename": "mongo/database.go",
        "patchSetId": 18
      },
      "lineNbr": 75,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Ack.\n\nGODIRVER-332.",
      "parentUuid": "a1c51445_c97164c2",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a3f03a_1fa1bcaa",
        "filename": "mongo/internal/feature/supported.go",
        "patchSetId": 18
      },
      "lineNbr": 17,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "This method is getting used at all. It would go on topology/server_selector.go#137, but that is exactly the below code. So, let\u0027s either call this function or get rid of it.\n\nHaving the function and using it is nice because it let\u0027s users find out what is supported and also is an easy way to document what features are checked.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb3eb65e_5e8ed0fe",
        "filename": "mongo/internal/feature/supported.go",
        "patchSetId": 18
      },
      "lineNbr": 17,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "I think we should keep this. Let\u0027s update the place where it should be used. I think this is description/server_selector.go#118 (I\u0027m also going to make a ticket to use the description server selectors and remove the topology ones).\n\nGODRIVER-333.",
      "parentUuid": "56a3f03a_1fa1bcaa",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdf4d130_704f3956",
        "filename": "mongo/private/auth/auth.go",
        "patchSetId": 18
      },
      "lineNbr": 95,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "This seems backwards. In the auth package, this handshaker should be solely responsible for doing authentication. The provided connection.Handshaker (h) should be doing the other stuff. In other words, this Handshaker is just wrapping h.\n\nSo, first thing in, call h.Handshake(...). Then call authenticator.Auth(...). And that\u0027s it.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec929f23_3eeea87e",
        "filename": "mongo/private/auth/auth.go",
        "patchSetId": 18
      },
      "lineNbr": 95,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "As per our discussion offline and David\u0027s email, this is the functionality we want.",
      "parentUuid": "bdf4d130_704f3956",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d510229b_a2080dd2",
        "filename": "mongo/private/options/options.go",
        "patchSetId": 18
      },
      "lineNbr": 516,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "This seems wonky... Would it not be better to have OptFields for Find, and OptProjection for the other things and not need to deal with a boolean that gets set somehow?",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98b9e694_fcf76fec",
        "filename": "mongo/private/options/options.go",
        "patchSetId": 18
      },
      "lineNbr": 516,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "So the CRUD spec requires there to be a projection option for both find and findOneAnd* methods. After we implement GODRIVER-272, we can update this package to have an OptFields and OptProjection since these options do not need to conform to the CRUD spec. I\u0027ve created GODRIVER-335 for this.",
      "parentUuid": "d510229b_a2080dd2",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98147edd_d540a36e",
        "filename": "mongo/private/roots/command/bootstrap.go",
        "patchSetId": 18
      },
      "lineNbr": 11,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "Is this used. I know Handshaker exists, so what additional stuff is this going to support?",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b5156b4_3869aa49",
        "filename": "mongo/private/roots/command/bootstrap.go",
        "patchSetId": 18
      },
      "lineNbr": 11,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "This is what was going to be Handshake before I made the Handshake command. We can remove this.",
      "parentUuid": "98147edd_d540a36e",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e56ab1a1_bb5b20b2",
        "filename": "mongo/private/roots/command/buildinfo.go",
        "patchSetId": 18
      },
      "lineNbr": 17,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "I don\u0027t understand this comment? Are you trying to say that this is really only for internal use? Why would a proxy, for instance, not want to catch/inspect a buildInfo command, or why would a user (internal) not want to run this?",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9e3f95d_22f824d1",
        "filename": "mongo/private/roots/command/buildinfo.go",
        "patchSetId": 18
      },
      "lineNbr": 17,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "This is an old comment form a previous design. When I first designed the command package, the dispatch functions were methods attached to each type. I have since separated them into their own package, since it provides a simpler dependency graph and separation, which means this comment no longer applies.",
      "parentUuid": "e56ab1a1_bb5b20b2",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "986a6738_f6ea9934",
        "filename": "mongo/private/roots/command/command.go",
        "patchSetId": 18
      },
      "lineNbr": 173,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "If a custom type implements bson.Marshaler, are we punting on validating it? There isn\u0027t a guarantee it does a right job, which could ultimately corrupt their data.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce0a2d0e_38767af7",
        "filename": "mongo/private/roots/command/command.go",
        "patchSetId": 18
      },
      "lineNbr": 173,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "I think part of my logic here was that we might have circumstances where users wants to send an invalid document for testing purposes, but that can be handled at the wiremessage layer.\n\nI can open a question ticket and we can send it to our alpha tests to see if they would prefer if we validated BSON if the type is a bson.Marshaler.",
      "parentUuid": "986a6738_f6ea9934",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dca6a49_ccbcdfcd",
        "filename": "mongo/private/roots/command/command.go",
        "patchSetId": 18
      },
      "lineNbr": 173,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-04T18:29:56Z",
      "side": 1,
      "message": "Perhaps... my concern isn\u0027t whether people want to do it, but whether we should let them. I\u0027m unclear as to whether the server validates BSON now... it used to not allowing invalid BSON to get in. If they don\u0027t, an implementation mistake could go a long time without getting caught.",
      "parentUuid": "ce0a2d0e_38767af7",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9af90a9f_cb685540",
        "filename": "mongo/private/roots/command/command.go",
        "patchSetId": 18
      },
      "lineNbr": 173,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T21:45:15Z",
      "side": 1,
      "message": "Opened GODRIVER-340 to discuss further.",
      "parentUuid": "0dca6a49_ccbcdfcd",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adf20c0a_2acb413f",
        "filename": "mongo/private/roots/command/command.go",
        "patchSetId": 18
      },
      "lineNbr": 173,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-04-04T23:53:12Z",
      "side": 1,
      "message": "I feel fairly strongly that the driver\u0027s bson abstraction layer should prevent bad BSON from getting on or off the wire.  But we can leave that to for subsequent work.",
      "parentUuid": "0dca6a49_ccbcdfcd",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "103cc616_a3930d71",
        "filename": "mongo/private/roots/command/command_test.go",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "So general statement here... this file is blank, and none of the other commands have any tests. I think we need them all to have tests. I personally prefer unit tests to just integration (I see the ones you have in the integration package). But I\u0027ll defer to you and Jeff on how much and where. \n\nNote that most of these do not have integration tests in the integration package and those that are there don\u0027t exhaustively test the encoding of options for each command.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd9071c2_6032d82b",
        "filename": "mongo/private/roots/command/command_test.go",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Will respond to the general statement in the main overview. This file is specifically here so we can generate coverage information from running the integration tests.",
      "parentUuid": "103cc616_a3930d71",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35345082_c69bfbbe",
        "filename": "mongo/private/roots/command/count.go",
        "patchSetId": 18
      },
      "lineNbr": 64,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "The server won\u0027t ever return this, which means without a unit test, it will never get exercised. Should probably either be removed, or add an IsNumber() method onto bson.Type and use an if statement. \n\nIf there is an IsNumber() method, I guess you\u0027d also need a way to get an Int64 from any of the number types... hmm.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9945496c_2884853b",
        "filename": "mongo/private/roots/command/count.go",
        "patchSetId": 18
      },
      "lineNbr": 64,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "We actually do have an IsNumber method on the Value type, but we can just remove this.",
      "parentUuid": "35345082_c69bfbbe",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "392a19a7_55bff480",
        "filename": "mongo/private/roots/command/delete.go",
        "patchSetId": 18
      },
      "lineNbr": 64,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "This applies to all the commands... why are we mutating the Delete structure with the result and an error instead of just returning them?",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88bea218_a539efa7",
        "filename": "mongo/private/roots/command/delete.go",
        "patchSetId": 18
      },
      "lineNbr": 64,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "In the future, when this library can also be used by proxies and servers, we\u0027ll be decoding the wiremessage that encoded created, therefore this method will not always set the result and err properties, it\u0027ll actually unwind the NS, Deletes, and Opts properties. This will also ensure that we can round trip the commands, so the results of an encode that are then decoded will result in the original object.",
      "parentUuid": "392a19a7_55bff480",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d36b01a6_ef51cee7",
        "filename": "mongo/private/roots/command/doc.go",
        "patchSetId": 18
      },
      "lineNbr": 8,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "*hands -\u003e handles",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b3374d6_0a690770",
        "filename": "mongo/private/roots/command/doc.go",
        "patchSetId": 18
      },
      "lineNbr": 8,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d36b01a6_ef51cee7",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19cb8bdb_a6641ba1",
        "filename": "mongo/private/roots/command/list_indexes.go",
        "patchSetId": 18
      },
      "lineNbr": 27,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "So OptBatchSize is the only struct that implements ListIndexesOptioner. However, batchSize isn\u0027t part of the cmd itself... it only, apparently, applies to the cursor. So it seems like mixing CursorOptioner and ListIndexesOptioner together is going to mis-apply the CursorOptioner to the cmd.\n\nIt looks like ListCollections and ListDatabases have the same issue. Any command that returns a cursor may have this problem, although it has been specifically handled in Aggregate and Find.\n\nThese makes me think there is a potential design issue here where making a change to an Optioner in some other package might cause invalid commands to get created.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "570f6c16_eedb8d81",
        "filename": "mongo/private/roots/command/list_indexes.go",
        "patchSetId": 18
      },
      "lineNbr": 27,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Ah, what we\u0027re missing here is a check if the option is a CursorOptioner and if it is we shouldn\u0027t include it in the initial command\u0027s options. Since we are doing GODRIVER-272 we can actually have a CursorOpts property on the types that return a Cursor and not have the Cursor only optioners implement those type optioners.\n\nYou are right though, this is a design issue, partially rooted in the way that we currently do options at the CRUD level. Once we do GODRIVER-272 though, we can fix this.",
      "parentUuid": "19cb8bdb_a6641ba1",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ddbf8fa_2ba2b1c1",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 18
      },
      "lineNbr": 100,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "can we move this method to another method?",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7ab14d8_54098877",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 18
      },
      "lineNbr": 100,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Sure, GODRIVER-336.",
      "parentUuid": "1ddbf8fa_2ba2b1c1",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d51ea04_277b1ad9",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 18
      },
      "lineNbr": 378,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "I don\u0027t think this function is used anywhere since it exists in the command package.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63b3afa2_959668b3",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 18
      },
      "lineNbr": 378,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7d51ea04_277b1ad9",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06891afd_36646f96",
        "filename": "mongo/private/roots/description/shared_spec_test.go",
        "patchSetId": 18
      },
      "lineNbr": 57,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "topologyKindFromString",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08a1d8c_046d5e98",
        "filename": "mongo/private/roots/description/shared_spec_test.go",
        "patchSetId": 18
      },
      "lineNbr": 57,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06891afd_36646f96",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6b91767_9c17f6ad",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 40,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "1. So we\u0027re saying that a write concern passed directly to this function takes precedence over one in the cmd.Opts... The one in cmd.Opts is the one the user provided directly to the collection.Aggregate method and the write concern passed as a parameter came from the collection; it seems like we are backwards here.\n\n2. What happens if cmd.Opts now has two OptWriteConcern? Does writeConcern get added twice to the command document?\n\n3. It feels wrong to mutate the provided cmd object by appending to it\u0027s array. I\u0027m not sure how to get around that with this design, but let\u0027s think about it. It is an unexpected outcome of calling this method.\n\nWhich brings up a different point... Why do we need to have both an Option as well as a parameter?\n\n(this applies to many other dispatch methods as well)",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e000f95_2a6be3a5",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 40,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Ah, so this is undocumented and should be documented somewhere but I\u0027m not sure where. Right now, the user\u0027s write concern will be used instead of the collection because only the first write concern will apply to the command.\n\nTo your last point, the reason writeConcern is an option is because we can\u0027t attach it to options slice in Collection.Aggregate because we don\u0027t know if this will be a read or write command. I\u0027ve created GODRIVER-337 to help with this problem. What that will allow us to do is make OptWriteConcern an actual writeConcern, this way we can extract out the write concern in collection.Aggregate and then always pass either that or the Collection\u0027s write concern.",
      "parentUuid": "d6b91767_9c17f6ad",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a3f1cd0_8aa20a58",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 40,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-04T18:29:56Z",
      "side": 1,
      "message": "\"Ah, so this is undocumented and should be documented somewhere but I\u0027m not sure where. Right now, the user\u0027s write concern will be used instead of the collection because only the first write concern will apply to the command.\"\n\nBut the last write concern will set the acknowledged field, so there is a disconnect between the options sent to the server and the acknowledged status after the loop on line 43.",
      "parentUuid": "8e000f95_2a6be3a5",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ab9558a_b4d51f1f",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 40,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T21:45:15Z",
      "side": 1,
      "message": "Discussed offline.",
      "parentUuid": "4a3f1cd0_8aa20a58",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ce5219e_d84ab220",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "During the call to ss.Connection(...), the description of the server could change and the connection could come back connected to a different version of the server. Super edge case here, but we really need to be getting the description for the server from the connection itself, not from the topology\u0027s selected server.\n\nThis comes into play down into the Encode methods of commands, particularly when you need to determine whether to use OP_MSG or not.\n\nI\u0027d imagine that simply putting a description.Server onto conn (which it already has) would be sufficient here to construct a new SelectedServer{} with that one instead of the server\u0027s itself.\n\n(This applies to every dispatch method it appears)",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9750b7d_1dbdf404",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-04-04T14:59:22Z",
      "side": 1,
      "message": "+1, though I\u0027m ok with creating a Jira issue for this and deferring it.",
      "parentUuid": "5ce5219e_d84ab220",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "424ee429_7f368cb9",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "What if we instead just retrieve the description after we get a connection?\n\nThe reason I don\u0027t want to attach a description to a connection is that the description could become out of date. We could be retrieving a pooled connection that was created hours ago and the topology could have changed or the server itself could have changed in the interim. It seems too expensive to either add an extra round trip or to try to update the descriptions of all of the current connections each time the server\u0027s description is updated.\n\nIt seems to me that in the general case that the server\u0027s description would be more update to date than the connection\u0027s description since the connections are far more likely to be pooled connections.",
      "parentUuid": "f9750b7d_1dbdf404",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c69c44f_9fca5ab9",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-04T18:29:56Z",
      "side": 1,
      "message": "If you reverse it, then you have the same problem in the opposite direction. This is a very edgy case, but one that has come up before.\n\nThe thing about the connection is that when the server changes states... different version, different wire version, no longer primary, maxWireMessageSize, maxBatchCount, etc... the connection gets killed. Which means that while we are holding onto the connection and it\u0027s alive, we know those things are correct, which are basically the only things we care about after this point. \n\nPerhaps that is an abstraction point. Don\u0027t pass down the whole description.Server, but rather just the stuff that is needed to make decisions. \n\nBut as Jeff said, no need to do this now. Create a ticket and move on.",
      "parentUuid": "424ee429_7f368cb9",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f150d674_eb449913",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T21:45:15Z",
      "side": 1,
      "message": "I opened GODRIVER-341 to continue discussion.",
      "parentUuid": "8c69c44f_9fca5ab9",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a45a8d6a_133dedca",
        "filename": "mongo/private/roots/dispatch/aggregate.go",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-04-04T23:53:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f150d674_eb449913",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52268fe9_d7da1a0b",
        "filename": "mongo/private/roots/dispatch/delete.go",
        "patchSetId": 18
      },
      "lineNbr": 36,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "Yes, but since we put ours last, the user\u0027s preference gets discarded.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5a58365_24915718",
        "filename": "mongo/private/roots/dispatch/delete.go",
        "patchSetId": 18
      },
      "lineNbr": 36,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "This loop will iterate in order, so the first write concern hit will be ours. After we see one we break the loop.",
      "parentUuid": "52268fe9_d7da1a0b",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2695df2c_302e7cda",
        "filename": "mongo/private/roots/dispatch/delete.go",
        "patchSetId": 18
      },
      "lineNbr": 36,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-04T18:29:56Z",
      "side": 1,
      "message": "ah, missed the break at the end. I think this should probably be written the other way.\n\nif wc, ok :\u003d opt.(options.OptWriteConcern); ok {\n  acknowledged \u003d wc.Acknowledged\n  break\n}\n\nLess lines, and more clear.",
      "parentUuid": "c5a58365_24915718",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bbae77d_c593ddea",
        "filename": "mongo/private/roots/dispatch/delete.go",
        "patchSetId": 18
      },
      "lineNbr": 36,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T21:45:15Z",
      "side": 1,
      "message": "Discussed offline.",
      "parentUuid": "2695df2c_302e7cda",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07ec9d1a_1c07c3ee",
        "filename": "mongo/private/roots/dispatch/delete.go",
        "patchSetId": 18
      },
      "lineNbr": 36,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-04-04T23:53:12Z",
      "side": 1,
      "message": "Was the outcome to leave it as is?",
      "parentUuid": "8bbae77d_c593ddea",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0697ab9_f3ec63f7",
        "filename": "mongo/private/roots/result/result.go",
        "patchSetId": 18
      },
      "lineNbr": 12,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "These are going to need to have additional stuff. You probably know this. Individual documents can have their own errors. Figuring out the right way to handle that in the API should be fun.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abf9e27d_e87e11f6",
        "filename": "mongo/private/roots/result/result.go",
        "patchSetId": 18
      },
      "lineNbr": 12,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-04-04T14:59:22Z",
      "side": 1,
      "message": "Is this intended to track errors as well, or is that a separate code path?\n\nTo pass CRUD tests, you probably need the _id of each document.",
      "parentUuid": "a0697ab9_f3ec63f7",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bce1db1c_2b2d57fb",
        "filename": "mongo/private/roots/result/result.go",
        "patchSetId": 18
      },
      "lineNbr": 12,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "The addition stuff will be added with GODRIVER-312 when we add support for write errors and write concern errors.\n\nThe insert command doesn\u0027t return the _id of each document, we actually handle that at the CRUD layer. Errors will be handled with these types.",
      "parentUuid": "abf9e27d_e87e11f6",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54e43eaa_156930cf",
        "filename": "mongo/private/roots/topology/server.go",
        "patchSetId": 18
      },
      "lineNbr": 135,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "This is gonna be misunderstood and will be totally unexpected...",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74f99ea3_10fc6b7b",
        "filename": "mongo/private/roots/topology/server.go",
        "patchSetId": 18
      },
      "lineNbr": 135,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "It\u0027s explicitly documented as having a king of Single. The name could be better though.",
      "parentUuid": "54e43eaa_156930cf",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57b005d9_1796e5b4",
        "filename": "mongo/private/roots/topology/server.go",
        "patchSetId": 18
      },
      "lineNbr": 135,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-04T18:29:56Z",
      "side": 1,
      "message": "Yeah, I saw the description, but devs don\u0027t read those until they\u0027ve been bitten. Make it hard to do the wrong thing and easy to do the right thing. This is pretty easy to mis-use and since this is easily handled outside of this struct, I\u0027m not sure it belongs on the struct to begin with.",
      "parentUuid": "74f99ea3_10fc6b7b",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3b91681_6173471c",
        "filename": "mongo/private/roots/topology/server.go",
        "patchSetId": 18
      },
      "lineNbr": 135,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T21:45:15Z",
      "side": 1,
      "message": "Per offline discussion, I\u0027ve opened GODRIVER-342.",
      "parentUuid": "57b005d9_1796e5b4",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cecb9d9f_a675555a",
        "filename": "mongo/private/roots/topology/server.go",
        "patchSetId": 18
      },
      "lineNbr": 272,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "Would a custom SSL setup (openssl) be provided as a dialer and not a handshaker?",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23e1abd3_b4263a6a",
        "filename": "mongo/private/roots/topology/server.go",
        "patchSetId": 18
      },
      "lineNbr": 272,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Yes, there is no access to the net.Conn at the handshaker level.",
      "parentUuid": "cecb9d9f_a675555a",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d682f182_0ae7371f",
        "filename": "mongo/private/roots/topology/server_selector.go",
        "patchSetId": 18
      },
      "lineNbr": 137,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "Should we call feature.MaxStaleness(...) here?",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "074bbe6d_588a782c",
        "filename": "mongo/private/roots/topology/server_selector.go",
        "patchSetId": 18
      },
      "lineNbr": 137,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "d682f182_0ae7371f",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9b9b31b_594f488d",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 18
      },
      "lineNbr": 41,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "The booleans are fine... it\u0027s the quantity of locks that is concerning. The potential for deadlocking seems high.",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f651ffce_c4e14bb5",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 18
      },
      "lineNbr": 41,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "This type will definitely need to be refactored.",
      "parentUuid": "f9b9b31b_594f488d",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a77fde11_8d9a3bf1",
        "filename": "mongo/private/roots/wiremessage/header.go",
        "patchSetId": 18
      },
      "lineNbr": 63,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-03T22:57:58Z",
      "side": 1,
      "message": "lenght -\u003e length",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac081b6c_5ca9b145",
        "filename": "mongo/private/roots/wiremessage/header.go",
        "patchSetId": 18
      },
      "lineNbr": 63,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-04T16:43:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a77fde11_8d9a3bf1",
      "revId": "828d8c224ada0fdc2900afed3c80803b5735c571",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}