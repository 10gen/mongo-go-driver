{
  "comments": [
    {
      "key": {
        "uuid": "deed6ae4_02afcc6e",
        "filename": "mongo/collection.go",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-12-20T12:46:46Z",
      "side": 1,
      "message": "For consistency, have a constant error here similar to bsonx.ErrNilDocument instead of using errors.New()",
      "range": {
        "startLine": 278,
        "startChar": 14,
        "endLine": 278,
        "endChar": 20
      },
      "revId": "836689a0441b47b0066fbaf73ad8069e3fffd0d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed91a9a0_93bb8491",
        "filename": "mongo/collection.go",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1015552
      },
      "writtenOn": "2018-12-20T19:45:43Z",
      "side": 1,
      "message": "Thanks for the feedback! I originally wrote it this way because BulkWrite threw a similar error. But I think this suggestion is especially relevant now that I\u0027ve rebased and have a bunch of errors thrown from transformAggregatePipeline that also differ from ErrNilDocument. So two questions I guess - 1) knowing that insertMany is error-ing out in a similar way to bulkWrite, do you still think I should change it? 2) thoughts on whether I should modify transformAggregatePipeline to thrown the same \"nil\" error that transformDocument and transformAndEnsureID throw?",
      "parentUuid": "deed6ae4_02afcc6e",
      "range": {
        "startLine": 278,
        "startChar": 14,
        "endLine": 278,
        "endChar": 20
      },
      "revId": "836689a0441b47b0066fbaf73ad8069e3fffd0d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c616ad44_078e6b63",
        "filename": "mongo/collection.go",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-12-20T20:53:20Z",
      "side": 1,
      "message": "I think BulkWrite and InsertMany should throw the same error and neither of those should be bsonx. Not sure which errors in transformAggregatePipeline you\u0027re referring to specifically. It does call transformDocument on the individual elements of the pipeline array, so that should catch the case where any of them are nil. I\u0027m not sure what the semantics of aggregate are. If an empty pipeline is invalid, transformAggregatePipeline should check the length of the array as well.",
      "parentUuid": "ed91a9a0_93bb8491",
      "range": {
        "startLine": 278,
        "startChar": 14,
        "endLine": 278,
        "endChar": 20
      },
      "revId": "836689a0441b47b0066fbaf73ad8069e3fffd0d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f4734b3_0be164e2",
        "filename": "mongo/collection.go",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-12-20T21:13:42Z",
      "side": 1,
      "message": "Empty agg pipeline is totally valid.  It just returns all documents, similar to find with no filter/projection",
      "parentUuid": "c616ad44_078e6b63",
      "range": {
        "startLine": 278,
        "startChar": 14,
        "endLine": 278,
        "endChar": 20
      },
      "revId": "836689a0441b47b0066fbaf73ad8069e3fffd0d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cbdca62_612852db",
        "filename": "mongo/collection.go",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1015552
      },
      "writtenOn": "2018-12-20T21:20:25Z",
      "side": 1,
      "message": "^That\u0027s functioning correctly. I\u0027m happy to change the errors thrown by InsertMany and BulkWrite to a constant error similar to ErrNilDocument, maybe ErrEmptySlice. But can you explain why you think in this particular case the err msgs should be constant whereas it\u0027s fine to use errors.New() elsewhere? I think that\u0027s what I\u0027m confused about.",
      "parentUuid": "2f4734b3_0be164e2",
      "range": {
        "startLine": 278,
        "startChar": 14,
        "endLine": 278,
        "endChar": 20
      },
      "revId": "836689a0441b47b0066fbaf73ad8069e3fffd0d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77bfeda8_7c80ab42",
        "filename": "mongo/collection.go",
        "patchSetId": 2
      },
      "lineNbr": 278,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-12-23T22:15:06Z",
      "side": 1,
      "message": "The current codebase is inconsistent with errors because we mix constants, errors.New, and fmt.Errorf. I personally prefer constant errors for a few reasons:\n\n1. they seem more readable to me\n2. we can document them more easily\n3. users can easily check what kind of error occurred if they want special logic based on the error. In this case they can do something like if err \u003d\u003d ErrEmptySlice. errors.New doesn\u0027t allow this, even if you use the right error msg (i.e. errors.New(\"foo\") !\u003d errors.New(\"foo\")).",
      "parentUuid": "7cbdca62_612852db",
      "range": {
        "startLine": 278,
        "startChar": 14,
        "endLine": 278,
        "endChar": 20
      },
      "revId": "836689a0441b47b0066fbaf73ad8069e3fffd0d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a184fdfe_a6728a2b",
        "filename": "mongo/collection.go",
        "patchSetId": 2
      },
      "lineNbr": 286,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-12-20T12:46:46Z",
      "side": 1,
      "message": "Do we want to use bsonx here? We should be avoiding any bsonx in mongo/ because it\u0027s an unstable API (see GODRIVER-708)",
      "range": {
        "startLine": 286,
        "startChar": 15,
        "endLine": 286,
        "endChar": 20
      },
      "revId": "836689a0441b47b0066fbaf73ad8069e3fffd0d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0db70c99_9d3b15b8",
        "filename": "mongo/collection.go",
        "patchSetId": 2
      },
      "lineNbr": 286,
      "author": {
        "id": 1015552
      },
      "writtenOn": "2018-12-20T19:45:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a184fdfe_a6728a2b",
      "range": {
        "startLine": 286,
        "startChar": 15,
        "endLine": 286,
        "endChar": 20
      },
      "revId": "836689a0441b47b0066fbaf73ad8069e3fffd0d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}