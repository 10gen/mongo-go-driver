{
  "comments": [
    {
      "key": {
        "uuid": "d4d7b6bb_9699f065",
        "filename": "core/result/result.go",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-26T13:14:15Z",
      "side": 1,
      "message": "You need details in here according to the CRUD spec. The result may contain extra pertinent information that isn\u0027t exposed in a typed manner.",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5594d358_a6c3c7fd",
        "filename": "core/result/result.go",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-26T15:42:34Z",
      "side": 1,
      "message": "While I\u0027ve added this, we need to update the CRUD spec because this field doesn\u0027t exist in most circumstances and fields that do exist in 3.4 and 3.6 like codeName are not represented here.",
      "parentUuid": "d4d7b6bb_9699f065",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afc67a1b_8218598b",
        "filename": "core/result/result.go",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-26T17:22:52Z",
      "side": 1,
      "message": "Then let\u0027s file a ticket for the CRUD spec to include this extra stuff. As it is, this extra stuff does indeed exist in the \"details\" document, which is why it\u0027s there. Using an older driver against a newer server means you still get the extra information.",
      "parentUuid": "5594d358_a6c3c7fd",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c330d4de_191f35c6",
        "filename": "core/result/result.go",
        "patchSetId": 9
      },
      "lineNbr": 65,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-26T17:38:05Z",
      "side": 1,
      "message": "After talking with someone on the server team the errInfo field is returned but only in a wtimeout WriteConcernError, which is difficult to test without putting some sort of proxy between mongod instances in a replicaset. We should come up with a better way of testing these types of errors.\n\nAlso the field that exists in 3.4 and 3.6 is not in details, it\u0027s called codeName and is not part of errInfo.",
      "parentUuid": "afc67a1b_8218598b",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e66a98e_cda85b71",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-26T13:14:15Z",
      "side": 1,
      "message": "1) So, not to belabor this, but this still seems wrong. In affect, we are forcing every user who calls a write method to not only check for a non-nil error, but to also check if it was unacknowledged.\n\nif err !\u003d nil \u0026\u0026 err !\u003d ErrUnacknowledgedWrite {\n    // ...\n}\n\nIf they don\u0027t do this and they do an unacknowledged write, they will misinterpret and handle the error, presumably because they think there was a problem, which there was not. Do other go APIs require this type of error checking?\n\nThis is going to be a complete surprise to users when someone flips a switch somewhere to make things \"go faster\" and everything starts breaking.\n\n(We are saved by the fact that this is used very infrequently, but for those few users...)\n\n2) Beyond this, the CRUD spec already has a mechanism to provide this information inside the XXXResult structures.  Like all things, I\u0027m not against breaking the rules with sufficient reason, but it has to be justified.",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a769568_09104ddf",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-26T15:42:34Z",
      "side": 1,
      "message": "ErrUnacknowledgedWrite works like io.EOF. It\u0027s a signal of a graceful end to something, it doesn\u0027t necessarily invalidate the returned information.\n\nI understand that the spec says that acknowledged can be a field within the result object, but that is far easier to miss than an error. Errors are not exceptions, so returning an error doesn\u0027t necessarily mean that something has failed.",
      "parentUuid": "0e66a98e_cda85b71",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37cb04b2_df1266a5",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-26T17:22:52Z",
      "side": 1,
      "message": "Fair enough... while I disagree with this choice, I\u0027m not going to argue about go idioms. You know way better than I.\n\nHowever, I can provide a little insight into the CRUD spec part.\n\nThe acknowledged flag in the result is there to indicate that other fields in the result have no values, specifically the counts (matchedCount, modifiedCount, etc...). If the fact that these have no values is divorced from the result itself, a user cannot pass the result to a helper function without also passing a second argument to indicate whether the counts in the result type are populated. Is there a go idiom to address this? Do you want to add MatchedCountSet booleans to each result? Is this not something that go developers need to worry about?",
      "parentUuid": "7a769568_09104ddf",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f750bd79_e8aaee20",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-26T17:38:05Z",
      "side": 1,
      "message": "A helper function for this seems weird to me. Why would a helper function only had a certain set of errors and not others? You would in effect be saying for the case of \"everything went well\" and the case of \"we don\u0027t know how things went\" are handled by one thing but the intermediate states, such as WriteErrors and WriteConcernErrors are handled by another. Perhaps this makes sense, but to me it makes the most sense that I would handle all of the cases that aren\u0027t \"everything went well\" together. Perhaps I am missing something here.\n\nAdditionally, there is nothing that precludes us from adding an acknowledged field to the result type later. We might revisit this once we implement bulkwrite as well.",
      "parentUuid": "37cb04b2_df1266a5",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21c70110_b8738931",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-04-26T17:43:06Z",
      "side": 1,
      "message": "In real applications the use of unacknowledged writes is a well-considered choice.  It\u0027s not something one would do accidentally.  We shouldn\u0027t complicate applications that make this choice by requiring them to ignore an ErrUnacknowledgedWrite error.  I say this with the assumption that there are other errors that could potentially be returned by a write operation, e.g. some BSON encoding failure.  So an application can\u0027t safely ignore all errors.  It would have to switch on the type of the error and ignore only ErrUnacknowledgedWrite.\n\nLet me know if I\u0027m misunderstanding something.",
      "parentUuid": "37cb04b2_df1266a5",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cfe3ed2_9eaddca3",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-26T17:46:55Z",
      "side": 1,
      "message": "Well, I think that\u0027s the whole point. An unaknowledged error doesn\u0027t mean something went badly. In fact, it\u0027s just information about something that already went well which means we have two different paths for handling \"it went well\". \n\nBut if you are set on this, then that\u0027s fine. You will need to add an acknowledged flag to the *Result types regardless because there isn\u0027t a good reason to not include it.",
      "parentUuid": "f750bd79_e8aaee20",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "417342c6_1a9beb35",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1014178
      },
      "writtenOn": "2018-04-26T17:54:38Z",
      "side": 1,
      "message": "I think if you ask for fire and forget, you should only get an error if your insert document is malformed or if there\u0027s a socket error, and I would be surprised by any error in this case.",
      "parentUuid": "f750bd79_e8aaee20",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6115220c_023e9245",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-26T18:38:44Z",
      "side": 1,
      "message": "I think the assumption here is that users always knows and understands the circumstances under which they have requested an unacknowledged write. I\u0027m not convinced that this is the case.\n\nIf we can safely assume the user always knows what they did, then we wouldn\u0027t need either the Collection.Name nor the Database.Name methods. We\u0027ve also stated that users sometimes are forgetful and don\u0027t remember to check things, which is why we said we don\u0027t want to use a fluent API.\n\nI think there\u0027s a possibility that a user doesn\u0027t intend to do an unacknowledged write, but does. Since they think they haven\u0027t done an unacknowledged write, they likely won\u0027t bother to check the acknowledged field of the return result. If they then think that the return means the write has been performed and do subsequent logic that requires the write to be completed, they might not know there is a problem until a timing bug occurs where the unacknowledged write doesn\u0027t happen for some time. This is likely to be a difficult bug to discover, debug, and ultimately fix.\n\nIf we think users will forget the string they used when calling client.Database or db.Collection, that it\u0027s valid that users might not fully understand what the write concern they have inherited is.",
      "parentUuid": "417342c6_1a9beb35",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52f985c9_4b2223ce",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-04-26T19:01:03Z",
      "side": 1,
      "message": "Let\u0027s defer this decision to a separate Jira issue, with a title like \"Return error for unacknowledged writes\", as it\u0027s holding up the review process for something that is higher priority. \n\nThis issue is about exposing write errors and write concern errors, and an unacknowledged write is neither of these.",
      "parentUuid": "6115220c_023e9245",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63509f4f_278134ba",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 152,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-26T19:17:38Z",
      "side": 1,
      "message": "Returning ErrUnacknowledgedWrite is the current behavior, so by leaving it we\u0027re saying that we will continue to return it and make an issue for not returning it, correct?",
      "parentUuid": "52f985c9_4b2223ce",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa24be38_3e69f255",
        "filename": "mongo/collection.go",
        "patchSetId": 9
      },
      "lineNbr": 360,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-26T13:14:15Z",
      "side": 1,
      "message": "Yes... an UpdateMany will only ever result in a single upsert. \"Update as many documents as match this filter. If none match, insert one.\"",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b01ff056_05f1f1fb",
        "filename": "mongo/errors.go",
        "patchSetId": 9
      },
      "lineNbr": 59,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-26T13:14:15Z",
      "side": 1,
      "message": "You need details in here according to the CRUD spec. The result may contain extra pertinent information that isn\u0027t exposed in a typed manner.",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "918e750e_8f342910",
        "filename": "mongo/errors.go",
        "patchSetId": 9
      },
      "lineNbr": 102,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-26T13:14:15Z",
      "side": 1,
      "message": "This comment isn\u0027t accurate.",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ccc140a3_c25b1191",
        "filename": "mongo/errors.go",
        "patchSetId": 9
      },
      "lineNbr": 102,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-26T15:42:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "918e750e_8f342910",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9980292_12629177",
        "filename": "mongo/errors.go",
        "patchSetId": 9
      },
      "lineNbr": 107,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-04-26T13:14:15Z",
      "side": 1,
      "message": "This comment isn\u0027t accurate.",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68272081_7a4b1836",
        "filename": "mongo/errors.go",
        "patchSetId": 9
      },
      "lineNbr": 107,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-04-26T15:42:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e9980292_12629177",
      "revId": "890bcff861625342b72cabc12a938f602e80905d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}