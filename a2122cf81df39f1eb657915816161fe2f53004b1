{
  "comments": [
    {
      "key": {
        "uuid": "3b1fdf6f_cf4d54f7",
        "filename": "bson/bsoncodec/bson_corpus_spec_test.go",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-10-08T22:07:55Z",
      "side": 1,
      "message": "DecodeErrors are unused.  We need to assert on those.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 31,
        "endChar": 1
      },
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1493df9_572ac62f",
        "filename": "bson/bsoncodec/bson_corpus_spec_test.go",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-10-08T22:07:55Z",
      "side": 1,
      "message": "ParseErrors are unused.  We need to assert on those.",
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae48ca2c_b8522b88",
        "filename": "bson/bsoncodec/bson_corpus_spec_test.go",
        "patchSetId": 6
      },
      "lineNbr": 212,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-10-08T22:07:55Z",
      "side": 1,
      "message": "Are we missing \"native_to_relaxed_extended_json( json_to_native(rEJ) ) \u003d rEJ\"?",
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c67b4dc3_7ca8d73e",
        "filename": "bson/bsoncodec/bson_corpus_spec_test.go",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-10-08T22:07:55Z",
      "side": 1,
      "message": "Consider combining with the same condition as on line 213, to avoid code duplication",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 1
      },
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3811456a_5c3a6dfe",
        "filename": "bson/bsoncodec/extjson_writer.go",
        "patchSetId": 6
      },
      "lineNbr": 580,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-10-08T22:07:55Z",
      "side": 1,
      "message": "This is not friendly to our non-ascii-speaking brethren. Can we use unicode.MaxLatin1 instead?  Or can we use the unicode.Is* methods (similar to Java driver)?  The idea is to make the JSON readable to users so long as they have the appropriate font to display the characters (since \\u escapes are hard to read)",
      "range": {
        "startLine": 580,
        "startChar": 0,
        "endLine": 580,
        "endChar": 1
      },
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17824c9a_5528f3ef",
        "filename": "bson/bsoncodec/extjson_writer.go",
        "patchSetId": 6
      },
      "lineNbr": 580,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-10-09T20:28:45Z",
      "side": 1,
      "message": "We should likely align with the standard library here. I didn\u0027t think of it before, but we might want to add support for escaping HTML characters, so that users can do a 1:1 swap with our *ExtJSON functions. There are also some provisions in there for safeguarding attacks on JSONP payloads.\n\nhttps://github.com/golang/go/blob/45e668879d763dd6b312034c98f8c5ffa7228ce6/src/encoding/json/encode.go#L886-L955\nhttps://github.com/golang/go/blob/45e668879d763dd6b312034c98f8c5ffa7228ce6/src/encoding/json/tables.go",
      "parentUuid": "3811456a_5c3a6dfe",
      "range": {
        "startLine": 580,
        "startChar": 0,
        "endLine": 580,
        "endChar": 1
      },
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f717181_8164a17c",
        "filename": "bson/bsoncodec/extjson_writer.go",
        "patchSetId": 6
      },
      "lineNbr": 580,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-10-09T20:29:52Z",
      "side": 1,
      "message": "Not sure this is enough.  What does the json package do?",
      "parentUuid": "3811456a_5c3a6dfe",
      "range": {
        "startLine": 580,
        "startChar": 0,
        "endLine": 580,
        "endChar": 1
      },
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4ce8cdb_d9b6f417",
        "filename": "bson/bsoncodec/value_writer_test.go",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-10-08T15:07:32Z",
      "side": 1,
      "message": "Why was this changed?",
      "range": {
        "startLine": 146,
        "startChar": 51,
        "endLine": 146,
        "endChar": 56
      },
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "888ccf60_1dd3a80d",
        "filename": "bson/bsoncodec/value_writer_test.go",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 1014927
      },
      "writtenOn": "2018-10-08T15:47:35Z",
      "side": 1,
      "message": "The bson corpus spec tests test not only the extended json reading/writing, but also the bson reading/writing. The spec says that regular expression options should be written in alphabetic order and the corpus tests test that. I updated the extended JSON writer and the bson value_writer to write the regular expression options in alphabetic order. That allowed them to pass the corpus tests, however that broke this test so I changed \"baz\" to \"abz\" to make it ordered.",
      "parentUuid": "a4ce8cdb_d9b6f417",
      "range": {
        "startLine": 146,
        "startChar": 51,
        "endLine": 146,
        "endChar": 56
      },
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e70e8c9_75d8639a",
        "filename": "bson/bsoncodec/value_writer_test.go",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-10-09T20:28:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "888ccf60_1dd3a80d",
      "range": {
        "startLine": 146,
        "startChar": 51,
        "endLine": 146,
        "endChar": 56
      },
      "revId": "a2122cf81df39f1eb657915816161fe2f53004b1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}