{
  "comments": [
    {
      "key": {
        "uuid": "c40c5c6d_d9b4ddeb",
        "filename": "bson/codec.go",
        "patchSetId": 15
      },
      "lineNbr": 189,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T20:04:37Z",
      "side": 1,
      "message": "It\u0027s going to be important to figure out how to get map doubles. The shell spuriously pushed doubles up and the server returns doubles for integer like things (ok: 1.0 comes up every now and then). So, you\u0027re gonna need to handle doubles here.",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8009f4dc_4a7e845c",
        "filename": "bson/codec.go",
        "patchSetId": 15
      },
      "lineNbr": 189,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-08-16T22:01:03Z",
      "side": 1,
      "message": "I don\u0027t think that this code will be used for things we get back from the server, but this is a thing to think about. I suppose the same is true of the FloatCodec with int32 and int64 BSON values.",
      "parentUuid": "c40c5c6d_d9b4ddeb",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77895997_a7ac0c67",
        "filename": "bson/codec.go",
        "patchSetId": 15
      },
      "lineNbr": 189,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T22:40:48Z",
      "side": 1,
      "message": "When a user does a RunCommand with an arbitrary document with a struct as output...\n\nAnd yeah, you\u0027re right, the FloatCodec needs to deal with integers.\n\nDecimals are something to think about, but they aren\u0027t accidentally used, so probably not necessary.",
      "parentUuid": "8009f4dc_4a7e845c",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c3555cc_99e884e4",
        "filename": "bson/codec.go",
        "patchSetId": 15
      },
      "lineNbr": 189,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-08-16T23:12:07Z",
      "side": 1,
      "message": "RunCommand makes sense for this, I guess we can borrow the truncate struct tag to handle truncating floats as well.",
      "parentUuid": "77895997_a7ac0c67",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b49cfecc_2c01e624",
        "filename": "bson/codec.go",
        "patchSetId": 15
      },
      "lineNbr": 344,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T20:04:37Z",
      "side": 1,
      "message": "Same here with doubles.",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2e03c91_ed351392",
        "filename": "bson/codec.go",
        "patchSetId": 15
      },
      "lineNbr": 528,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T20:04:37Z",
      "side": 1,
      "message": "You\u0027ll also want to handle symbols in here. It\u0027s a deprecated type, but still.",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02d0f03a_141c4a05",
        "filename": "bson/codec.go",
        "patchSetId": 15
      },
      "lineNbr": 528,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-08-16T22:01:03Z",
      "side": 1,
      "message": "There is a Codec for JavaScript and Symbol.",
      "parentUuid": "f2e03c91_ed351392",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5c7418c_747c435b",
        "filename": "bson/codec.go",
        "patchSetId": 15
      },
      "lineNbr": 528,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-20T17:55:57Z",
      "side": 1,
      "message": "Sure, but if the user has a field of type string and it\u0027s a symbol, it should still be able to get decoded.",
      "parentUuid": "02d0f03a_141c4a05",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "298be73c_bc015ed5",
        "filename": "bson/codec.go",
        "patchSetId": 15
      },
      "lineNbr": 528,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-08-20T18:36:38Z",
      "side": 1,
      "message": "That\u0027ll work, there\u0027ll just be a fast path case for our bson.JavaScript and bson.Symbol types.",
      "parentUuid": "a5c7418c_747c435b",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b76adc8f_0b3cb8b5",
        "filename": "bson/map_codec.go",
        "patchSetId": 15
      },
      "lineNbr": 76,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T20:04:37Z",
      "side": 1,
      "message": "could i not include an already instantiated map? I believe this is the thing that Sam was referring to (perhaps for structs, but same principal). What does the json package do when you ask it to read into a structure containing an already instantiated map?",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b44b0fa1_cf9bd39a",
        "filename": "bson/map_codec.go",
        "patchSetId": 15
      },
      "lineNbr": 76,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-08-16T22:01:03Z",
      "side": 1,
      "message": "The encoding/json package adds to the map. We could probably do the same thing here.",
      "parentUuid": "b76adc8f_0b3cb8b5",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07d3fca9_22f6a21c",
        "filename": "bson/struct_codec.go",
        "patchSetId": 15
      },
      "lineNbr": 69,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T20:04:37Z",
      "side": 1,
      "message": "Instead of looking this up for a field you already know about everytime, you should cache the code in the field description. The first decode/encode takes a hit, but all subsequent struct encoding/decoding will be much faster... requiring no reflection at all. Not native, but close to it.",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc933356_2f651122",
        "filename": "bson/struct_codec.go",
        "patchSetId": 15
      },
      "lineNbr": 69,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-08-16T22:01:03Z",
      "side": 1,
      "message": "I don\u0027t particularly know if we should should be caching Codecs inside of this Codec, especially since we share a default instance of this globally.",
      "parentUuid": "07d3fca9_22f6a21c",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b75fdaba_11214ce0",
        "filename": "bson/struct_codec.go",
        "patchSetId": 15
      },
      "lineNbr": 69,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T22:40:48Z",
      "side": 1,
      "message": "Yeah, but the global registry is immutable. It is a certainty that doing a lookup will retrieve the exact same thing it did the last time, and time before that, etc...\n\nIf they are using a non-default registry, it should have a different instance of the StructCodec.",
      "parentUuid": "cc933356_2f651122",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2aedb5e_995c6599",
        "filename": "bson/struct_codec.go",
        "patchSetId": 15
      },
      "lineNbr": 69,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-08-16T23:12:07Z",
      "side": 1,
      "message": "The global default struct is used for all new Registries created. We could create a new struct codec for each new registry.\nI don\u0027t know if it changes things, but we also have to provide the Registry to the Codec when we use it. Although, I guess a Codec shouldn\u0027t assume what registry is being used.",
      "parentUuid": "b75fdaba_11214ce0",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b802cc4_8e253519",
        "filename": "bson/struct_codec.go",
        "patchSetId": 15
      },
      "lineNbr": 69,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T23:22:21Z",
      "side": 1,
      "message": "seems like there are some other things to think about. Let\u0027s come back to this.",
      "parentUuid": "f2aedb5e_995c6599",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8c352a8_3f55db3d",
        "filename": "bson/struct_codec.go",
        "patchSetId": 15
      },
      "lineNbr": 158,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T20:04:37Z",
      "side": 1,
      "message": "Same here if you cache the codec in the field description.",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca82f2ff_81a9643b",
        "filename": "bson/struct_tag_parser.go",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T20:04:37Z",
      "side": 1,
      "message": "Is it possible for the user to provide a type name that we can lookup at runtime? This would be useful on an interface{} type indicating that it should always be. Maybe not worth it right now.",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9a4bd29_90a390da",
        "filename": "bson/struct_tag_parser.go",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-08-16T22:01:03Z",
      "side": 1,
      "message": "We could theoretically have a GlobalTagRegistry where a user would specify a string and then provide a type that we would use, but that seems very... error prone?",
      "parentUuid": "ca82f2ff_81a9643b",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "362f110d_0119ebc4",
        "filename": "bson/value_types.go",
        "patchSetId": 15
      },
      "lineNbr": 32,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-08-16T20:04:37Z",
      "side": 1,
      "message": "What are these v2 things?",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36e37b7f_d9a1bfc4",
        "filename": "bson/value_types.go",
        "patchSetId": 15
      },
      "lineNbr": 32,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-08-16T22:01:03Z",
      "side": 1,
      "message": "Temporary, because there is code that uses the non v2 types and I don\u0027t want to break the code I\u0027m going to delete later.",
      "parentUuid": "362f110d_0119ebc4",
      "revId": "b260a0504e869ea51cf7ae3ce147661aa999ccff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}