{
  "comments": [
    {
      "key": {
        "uuid": "7af62595_2ddc7ec3",
        "filename": "core/dispatch/dispatch.go",
        "patchSetId": 19
      },
      "lineNbr": 19,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "It appears as though you are adding a data bearing server selector if and only if a data bearing server exists. There shouldn\u0027t be any server selectors that return non-data bearing servers. So, why do we need this?",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc9c5092_54f8e551",
        "filename": "core/dispatch/distinct.go",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "This is repeated in umpteen different files... is there a way to centralize this logic?",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "144a132c_fce76957",
        "filename": "core/dispatch/distinct.go",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:16:40Z",
      "side": 1,
      "message": "After looking at Roland\u0027s client code review, it seems like the only reason we are in this situation is that they might have provided us without a session at all and we need to use the implicit session.\n\nA) Should we ever have more than 1 implicit session? If not, then can it get created once in the mongo.Client and just passed everywhere when one is not provided?\n\nB) Is an implicit session actually linked to a pool? If it should never be added to a pool, then why does it need one?\n\nIf these get answered the way I think they can, I believe that all this code in every dispatch method can go away.",
      "parentUuid": "bc9c5092_54f8e551",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "705ee435_f0876f9d",
        "filename": "core/dispatch/distinct.go",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1013848
      },
      "writtenOn": "2018-07-17T12:55:20Z",
      "side": 1,
      "message": "A) Yes, you need one for each concurrently running operation\nB) Yes, implicit sessions need to be pooled\n\nWith regard to centralization: in Java/.NET, session management is handled in the MongoClient\u0027s OperationExecutor, which all operations flow through.  The core driver is always just handed a session, or nil if no session is required (e.g. due to topology type or server version).",
      "parentUuid": "144a132c_fce76957",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d1603a7_ab1e4045",
        "filename": "core/dispatch/distinct.go",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "Not too sure about question A. For B: NewClientSession() is passed a server session pool because it needs to get a server session that it can wrap. Also, when it is terminated, it needs to put the server session back in the pool.\n\nAlso, 1 problem we had was that not every command closes its client session right away. Commands that return cursors don\u0027t close the client session because the cursor needs to use the same session ID for getMore commands. The session is terminated when the cursor is closed. I think this made it difficult to push this logic down to command.Read/command.Write because they don\u0027t know what command they\u0027re running.",
      "parentUuid": "144a132c_fce76957",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27df1849_a983574b",
        "filename": "core/dispatch/distinct.go",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T13:39:41Z",
      "side": 1,
      "message": "Fair enough about pooling... \n\nIf the client always provided a session (implicit or otherwise), this wouldn\u0027t be necessary at all would it?",
      "parentUuid": "4d1603a7_ab1e4045",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc9fa42c_047a744a",
        "filename": "core/session/cluster_clock.go",
        "patchSetId": 19
      },
      "lineNbr": 12,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "Is there an overwhelming number of calls to GetClusterTime vs. AdvanceClusterTime? If so, then this is great. If they are evenly split, we should just use a simple Mutex.",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25d00385_1ed3b8f9",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 10,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "Just wondering why you have chosen a linked list for the pool structure instead of something like the connection pool, which uses a buffered channel.",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c102b06_21490043",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 10,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "Chose a pool because I didn\u0027t know how big the channel\u0027s buffer would be. It\u0027s possible to create an arbitrary number of sessions and put them all in the pool.",
      "parentUuid": "25d00385_1ed3b8f9",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8af0c99_af81ee5c",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 10,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T13:39:41Z",
      "side": 1,
      "message": "Given that the spec requires you to remove sessions from the end of the pool, I think you\u0027ve made a good choice here.",
      "parentUuid": "5c102b06_21490043",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c702a4b_fd901d79",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 19,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "do all of these need to be exported?",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f38a5ebf_cc12796f",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 38,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "It would be best to not hold onto this lock so long.\n\np.Mutex.Lock()\nvar sessionTimeout \u003d p.SessionTimeout\np,Mutex.Unlock()\n\nThe problem is that this lock is also protecting the linked list. I would update this comment (or remove it) to prevent future devs from thinking they can optimize it away.",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "295e554d_8ed688ed",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 38,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "Yes, the lock protects both the SessionTimeout and linked list itself. We\u0027ll update the comment.",
      "parentUuid": "f38a5ebf_cc12796f",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4866218_33a29e4d",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 80,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "Is it important to do this at the back? In other words, you are already doing this at the front. Do we need to do it in both places? If not, I believe you can change this to a singly linked list and to make this simpler in general.",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39471974_a76f4ae1",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 80,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "According to the spec, when returning a session to the pool, we must check the sessions at the back of the queue for expiration because these are the oldest sessions and must stop checking once we\u0027ve found a session that is not about to expire. I don\u0027t think this can be done with a singly linked list.",
      "parentUuid": "c4866218_33a29e4d",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f29da3e2_0f989155",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 114,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "I was going to suggest ways to get rid of the locks by using channels, but this method makes channels impossible.",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47c64a09_03ec9ecf",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 114,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "This is only actually used when calling EndSessions to drain the pool, so it can be refactored if we choose to use channels.",
      "parentUuid": "f29da3e2_0f989155",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81abaf59_b629b48b",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 140,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "This method needs to use a lock.",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36ef10f0_f86bf197",
        "filename": "core/session/session_pool.go",
        "patchSetId": 19
      },
      "lineNbr": 140,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "81abaf59_b629b48b",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "510c5c91_03e5234d",
        "filename": "core/session/session_pool_test.go",
        "patchSetId": 19
      },
      "lineNbr": 10,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "Also need to test that expired sessions are removed and never returned.",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b38250d3_f9d66921",
        "filename": "core/session/session_pool_test.go",
        "patchSetId": 19
      },
      "lineNbr": 10,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "Will add a test for this.",
      "parentUuid": "510c5c91_03e5234d",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e66f31df_7cbcd184",
        "filename": "core/topology/fsm.go",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "It feels like we are going to flip-flopping SessionTimeoutMinutes when connected to a mix of servers where some support sessions and some don\u0027t.\n\nServer A \u003d 20 timeout minutes\nServer B \u003d doesn\u0027t support session\n\nA -\u003e f.SessionTimeoutMinutes \u003d 20\nB -\u003e f.SessionTimeoutMinutes \u003d 0\nA -\u003e f.SessionTimeoutMinutes \u003d 20",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4baa94f3_e321e8ca",
        "filename": "core/topology/fsm.go",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "Although it\u0027s inefficient, it sounds correct. We use this number to determine whether or not we send sessions with our commands, so it needs to reflect the capabilities of the server we\u0027re connected to, even though this may mean changing the number every time we connect to a different server.",
      "parentUuid": "e66f31df_7cbcd184",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff91ed81_7b517d93",
        "filename": "core/topology/fsm.go",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T13:39:41Z",
      "side": 1,
      "message": "A. It\u0027s not about efficiency. It\u0027s about what should be returned when someone asks for session timeout minutes. When you are connected to multiple servers (A and B) from our example, it should always return 0 when either of them doesn\u0027t support sessions. So I don\u0027t think this is right.\n\nB. Also, you should only be checking for this if the server is a data-bearing server. I think that answers my other question about the DataBearing server selector elsewhere. I don\u0027t believe it\u0027s needed. You only need to worry about that here.",
      "parentUuid": "4baa94f3_e321e8ca",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "158f2dd6_b6c08ef4",
        "filename": "core/topology/topology_test.go",
        "patchSetId": 19
      },
      "lineNbr": 228,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "please add a test (or multiple) for SessionTimeoutMinutes: 0",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41e26093_de4b89c9",
        "filename": "core/topology/topology_test.go",
        "patchSetId": 19
      },
      "lineNbr": 228,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "will add a test.",
      "parentUuid": "158f2dd6_b6c08ef4",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9bfd0ed_84e01f80",
        "filename": "core/topology/topology_test.go",
        "patchSetId": 19
      },
      "lineNbr": 305,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-07-17T11:03:19Z",
      "side": 1,
      "message": "I don\u0027t think this comment is correct.",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8a1ac1f_5f4ee1a6",
        "filename": "core/topology/topology_test.go",
        "patchSetId": 19
      },
      "lineNbr": 305,
      "author": {
        "id": 1014410
      },
      "writtenOn": "2018-07-17T13:03:18Z",
      "side": 1,
      "message": "yes this should say \"should not update because new timeout is higher\"",
      "parentUuid": "a9bfd0ed_84e01f80",
      "revId": "c3997b23c49cdf7555a7891791fbd1e8dfc62c94",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}