{
  "comments": [
    {
      "key": {
        "uuid": "76c41abd_865ab0ae",
        "filename": "bson/bsoncodec/bsoncodec.go",
        "patchSetId": 16
      },
      "lineNbr": 17,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-09-21T15:29:49Z",
      "side": 1,
      "message": "Why is this in the bsoncodec package? I seems like it belongs in the bson package given what it does.",
      "revId": "c40e2506ebc3fe2ebb19fc2fd64547f9f66eb16d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86825fbc_434050cd",
        "filename": "bson/bsoncodec/bsoncodec.go",
        "patchSetId": 16
      },
      "lineNbr": 17,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-09-21T16:41:51Z",
      "side": 1,
      "message": "It can\u0027t be in the bson package because it requires the use of a Registry to function.",
      "parentUuid": "76c41abd_865ab0ae",
      "revId": "c40e2506ebc3fe2ebb19fc2fd64547f9f66eb16d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "906ffe42_84977b5c",
        "filename": "bson/constructor.go",
        "patchSetId": 16
      },
      "lineNbr": 536,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-09-21T15:29:49Z",
      "side": 1,
      "message": "Isn\u0027t there a go idiom for these types of methods... bson.MustElement(bson.EC.FromBytes(src)) as opposed to having 2 different methods for absolutely everything.\n\nbson.MustElement, bson.MustValue, etc... that can handle multiple methods... LookupElement, Lookup?",
      "revId": "c40e2506ebc3fe2ebb19fc2fd64547f9f66eb16d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d74b3e6f_85671d95",
        "filename": "bson/constructor.go",
        "patchSetId": 16
      },
      "lineNbr": 536,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-09-21T16:41:51Z",
      "side": 1,
      "message": "Some packages follow that pattern, but the way in which this package is used for the most part doesn\u0027t require error handling from methods like these. Also, it was requested instead of using Must* we make the default what would usually be Must* methods and add *Err methods for ones that return an error. It\u0027s something that I\u0027ve been trying to keep consistent across the library.",
      "parentUuid": "906ffe42_84977b5c",
      "revId": "c40e2506ebc3fe2ebb19fc2fd64547f9f66eb16d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f080690_10a94399",
        "filename": "bson/constructor.go",
        "patchSetId": 16
      },
      "lineNbr": 536,
      "author": {
        "id": 1013853
      },
      "writtenOn": "2018-09-21T16:57:41Z",
      "side": 1,
      "message": "Requested by whom? I\u0027d argue that the default is to want to know if what I got back is totally bogus and doesn\u0027t exist. Defaults as they are will likely create lots of \"bad\" data problems. I know, in my current use of the bson library, that I never use the ones that don\u0027t return an error or bool (ok).\n\nIs this really so bad?\nv :\u003d doc.Lookup(\"a\")\n\nvs.\n\nv, _ :\u003d doc.Lookup(\"a\")\n\nIn the latter, the user is actively deciding to ignore the error, where in the first, the user might not even know. Alternatively, bson.MustValue(doc.Lookup(\"a\")).Int32() allows them to chain if they must (haha, see what I did there :)).",
      "parentUuid": "d74b3e6f_85671d95",
      "revId": "c40e2506ebc3fe2ebb19fc2fd64547f9f66eb16d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b4b9942_2fa630fb",
        "filename": "bson/constructor.go",
        "patchSetId": 16
      },
      "lineNbr": 536,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-09-21T17:46:32Z",
      "side": 1,
      "message": "Eliot is the main person that comes to mind. We also had a ticket about the semantics of this: https://jira.mongodb.org/browse/GODRIVER-360. Apparently we\u0027ve discussed this before since in one of the comments I added a remark about having a conversation with you and Jeff.\n\nA main benefit of the first syntax is that it can easily be inlined, and is not too verbose. There are other libraries that behave in this manner, notably the reflect package, which this one is somewhat modeled after.",
      "parentUuid": "7f080690_10a94399",
      "revId": "c40e2506ebc3fe2ebb19fc2fd64547f9f66eb16d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}