// Code generated by "monitor_fsm_spec_internal_test_generator.go"; DO NOT EDIT

package cluster

import "testing"
import "gopkg.in/mgo.v2/bson"
import "github.com/10gen/mongo-go-driver/internal"
import "github.com/10gen/mongo-go-driver/connstring"
import "github.com/10gen/mongo-go-driver/desc"
import "github.com/10gen/mongo-go-driver/internal/descutil"

func TestMonitorFSM_Discover_arbiters(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Arbiters = []string{"b:27017"}
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Discover_passives(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.Passives = []string{"b:27017"}
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.Passives = []string{"b:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Replica_set_discovery_from_primary(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Replica_set_discovery_from_secondary(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Replica_set_discovery(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017", "c:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 3 {
		t.Fatalf("expected len(fsm.Servers) to be 3, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"b:27017", "c:27017", "d:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 4 {
		t.Fatalf("expected len(fsm.Servers) to be 4, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("d:27017"))
	if !ok {
		t.Fatalf("server d:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 3 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"b:27017", "c:27017", "d:27017", "e:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("d:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 3 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 4 {
		t.Fatalf("expected len(fsm.Servers) to be 4, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("d:27017"))
	if !ok {
		t.Fatalf("server d:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("e:27017"))
	if !ok {
		t.Fatalf("server e:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 4 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017", "c:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("c:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 4 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 4 {
		t.Fatalf("expected len(fsm.Servers) to be 4, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("d:27017"))
	if !ok {
		t.Fatalf("server d:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("e:27017"))
	if !ok {
		t.Fatalf("server e:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_New_primary_with_equal_electionId(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 - response 2
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Ghost_discovered(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsReplicaSet = true
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSGhost {
		t.Fatalf("expected serverDesc.Type to be desc.RSGhost, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Host_list_differs_from_seeds(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Member_removed_by_reconfig(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Member_brought_up_as_standalone(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.UnknownClusterType {
		t.Fatalf("expected fsm.Type to be desc.UnknownClusterType, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_New_primary(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_New_primary_with_greater_setVersion_and_electionId(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000002")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 3 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 3 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_New_primary_with_greater_setVersion(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 2
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 3 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 3 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_New_primary_with_wrong_setName(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "wrong"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Non_replicaSet_member_responds(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Replica_set_case_normalization(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://A/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Arbiters = []string{"C:27017"}
	imr.Hosts = []string{"A:27017"}
	imr.IsMaster = true
	imr.Passives = []string{"B:27017"}
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 3 {
		t.Fatalf("expected len(fsm.Servers) to be 3, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Primaries_with_and_without_electionIds(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017", "c:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 3 {
		t.Fatalf("expected len(fsm.Servers) to be 3, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000002")
	imr.Hosts = []string{"a:27017", "b:27017", "c:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 3 {
		t.Fatalf("expected len(fsm.Servers) to be 3, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 3 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017", "c:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 3 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 3 {
		t.Fatalf("expected len(fsm.Servers) to be 3, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 4 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017", "c:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("c:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 4 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 3 {
		t.Fatalf("expected len(fsm.Servers) to be 3, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Primary_becomes_standalone(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 0 {
		t.Fatalf("expected len(fsm.Servers) to be 0, but got \"%v\"", len(fsm.Servers))
	}
}

func TestMonitorFSM_Primary_changes_setName(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "wrong"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 0 {
		t.Fatalf("expected len(fsm.Servers) to be 0, but got \"%v\"", len(fsm.Servers))
	}
}

func TestMonitorFSM_Disconnected_from_primary(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Disconnected_from_primary__reject_primary_with_stale_electionId(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 - response 2
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000002")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 3 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 3 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 4 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000003")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 4 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 5 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 5 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Disconnected_from_primary__reject_primary_with_stale_setVersion(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 - response 2
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 2
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 3 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 3 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 4 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000002")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 2
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 4 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 5 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 5 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Secondary_with_mismatched__me__tells_us_who_the_primary_is(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"b:27017"}
	imr.Me = "c:27017"
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"b:27017"}
	imr.IsMaster = true
	imr.Me = "b:27017"
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Primary_mismatched_me(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://localhost:27017/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.Me = "a:27017"
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("localhost:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Primary_reports_a_new_member(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 3 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017", "c:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 3 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 3 {
		t.Fatalf("expected len(fsm.Servers) to be 3, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 4 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017", "c:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("c:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 4 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 3 {
		t.Fatalf("expected len(fsm.Servers) to be 3, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Primary_to_no_primary_with_mismatched_me(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.Me = "a:27017"
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"c:27017", "d:27017"}
	imr.IsMaster = true
	imr.Me = "c:27017"
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("d:27017"))
	if !ok {
		t.Fatalf("server d:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Primary_wrong_setName(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "wrong"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 0 {
		t.Fatalf("expected len(fsm.Servers) to be 0, but got \"%v\"", len(fsm.Servers))
	}
}

func TestMonitorFSM_Response_from_removed_server(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_RSOther_discovered(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hidden = true
	imr.Hosts = []string{"c:27017", "d:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 - response 2
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"c:27017", "d:27017"}
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 4 {
		t.Fatalf("expected len(fsm.Servers) to be 4, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSMember {
		t.Fatalf("expected serverDesc.Type to be desc.RSMember, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSMember {
		t.Fatalf("expected serverDesc.Type to be desc.RSMember, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("c:27017"))
	if !ok {
		t.Fatalf("server c:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("d:27017"))
	if !ok {
		t.Fatalf("server d:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Secondary_s_host_list_is_not_authoritative(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 - response 2
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"b:27017", "c:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Secondary_mismatched_me(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://localhost:27017/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.Me = "a:27017"
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("localhost:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Secondary_wrong_setName(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.Secondary = true
	imr.SetName = "wrong"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 0 {
		t.Fatalf("expected len(fsm.Servers) to be 0, but got \"%v\"", len(fsm.Servers))
	}
}

func TestMonitorFSM_Secondary_wrong_setName_with_primary(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.Secondary = true
	imr.SetName = "wrong"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_setVersion_is_ignored_if_there_is_no_electionId(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 2
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Primary_becomes_a_secondary_with_wrong_setName(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017"}
	imr.Secondary = true
	imr.SetName = "wrong"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 0 {
		t.Fatalf("expected len(fsm.Servers) to be 0, but got \"%v\"", len(fsm.Servers))
	}
}

func TestMonitorFSM_Unexpected_mongos(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	imr.Msg = "isdbgrid"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 0 {
		t.Fatalf("expected len(fsm.Servers) to be 0, but got \"%v\"", len(fsm.Servers))
	}
}

func TestMonitorFSM_Record_max_setVersion__even_from_primary_without_electionId(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000001")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 2
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}

	// phase 3 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ElectionID = bson.ObjectIdHex("000000000000000000000002")
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	imr.SetVersion = 1
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 3 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetWithPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetWithPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Wrong_setName(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b/?replicaSet=rs")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"b:27017", "c:27017"}
	imr.Secondary = true
	imr.SetName = "wrong"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "rs" {
		t.Fatalf("expected fsm.setName to be \"rs\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.ReplicaSetNoPrimary {
		t.Fatalf("expected fsm.Type to be desc.ReplicaSetNoPrimary, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Mongos_disconnect(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	imr.Msg = "isdbgrid"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 - response 2
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	imr.Msg = "isdbgrid"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Sharded {
		t.Fatalf("expected fsm.Type to be desc.Sharded, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.Mongos {
		t.Fatalf("expected serverDesc.Type to be desc.Mongos, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.Mongos {
		t.Fatalf("expected serverDesc.Type to be desc.Mongos, but got \"%v\"", serverDesc.Type)
	}

	// phase 2 - response 1
	imr = &internal.IsMasterResult{}
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 2 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Sharded {
		t.Fatalf("expected fsm.Type to be desc.Sharded, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.Mongos {
		t.Fatalf("expected serverDesc.Type to be desc.Mongos, but got \"%v\"", serverDesc.Type)
	}

	// phase 3 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	imr.Msg = "isdbgrid"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 3 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Sharded {
		t.Fatalf("expected fsm.Type to be desc.Sharded, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.Mongos {
		t.Fatalf("expected serverDesc.Type to be desc.Mongos, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.Mongos {
		t.Fatalf("expected serverDesc.Type to be desc.Mongos, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Multiple_mongoses(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	imr.Msg = "isdbgrid"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 - response 2
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	imr.Msg = "isdbgrid"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Sharded {
		t.Fatalf("expected fsm.Type to be desc.Sharded, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.Mongos {
		t.Fatalf("expected serverDesc.Type to be desc.Mongos, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.Mongos {
		t.Fatalf("expected serverDesc.Type to be desc.Mongos, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Non_Mongos_server_in_sharded_cluster(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	imr.Msg = "isdbgrid"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 - response 2
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("b:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Sharded {
		t.Fatalf("expected fsm.Type to be desc.Sharded, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.Mongos {
		t.Fatalf("expected serverDesc.Type to be desc.Mongos, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Normalize_URI_case(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://A,B")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.UnknownClusterType {
		t.Fatalf("expected fsm.Type to be desc.UnknownClusterType, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 2 {
		t.Fatalf("expected len(fsm.Servers) to be 2, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	var serverDesc *desc.Server
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Direct_connection_to_RSPrimary_via_external_IP(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Single {
		t.Fatalf("expected fsm.Type to be desc.Single, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Connect_to_mongos(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	imr.Msg = "isdbgrid"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Single {
		t.Fatalf("expected fsm.Type to be desc.Single, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.Mongos {
		t.Fatalf("expected serverDesc.Type to be desc.Mongos, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Connect_to_RSArbiter(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.ArbiterOnly = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Single {
		t.Fatalf("expected fsm.Type to be desc.Single, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSArbiter {
		t.Fatalf("expected serverDesc.Type to be desc.RSArbiter, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Connect_to_RSPrimary(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.IsMaster = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Single {
		t.Fatalf("expected fsm.Type to be desc.Single, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSPrimary {
		t.Fatalf("expected serverDesc.Type to be desc.RSPrimary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Connect_to_RSSecondary(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.Hosts = []string{"a:27017", "b:27017"}
	imr.Secondary = true
	imr.SetName = "rs"
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Single {
		t.Fatalf("expected fsm.Type to be desc.Single, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.RSSecondary {
		t.Fatalf("expected serverDesc.Type to be desc.RSSecondary, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Direct_connection_to_slave(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Single {
		t.Fatalf("expected fsm.Type to be desc.Single, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.Standalone {
		t.Fatalf("expected serverDesc.Type to be desc.Standalone, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Connect_to_standalone(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Single {
		t.Fatalf("expected fsm.Type to be desc.Single, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.Standalone {
		t.Fatalf("expected serverDesc.Type to be desc.Standalone, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Handle_a_not_ok_ismaster_response(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 - response 2
	imr = &internal.IsMasterResult{}
	imr.IsMaster = true
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Single {
		t.Fatalf("expected fsm.Type to be desc.Single, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Standalone_removed_from_multi_server_topology(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a,b")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	imr.OK = true
	imr.IsMaster = true
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.UnknownClusterType {
		t.Fatalf("expected fsm.Type to be desc.UnknownClusterType, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("b:27017"))
	if !ok {
		t.Fatalf("server b:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}

func TestMonitorFSM_Unavailable_seed(t *testing.T) {
	t.Parallel()

	var fsm monitorFSM

	cs, _ := connstring.Parse("mongodb://a")
	fsm.setName = cs.ReplicaSet
	if fsm.setName != "" {
		fsm.Type = desc.ReplicaSetNoPrimary
	}
	if len(cs.Hosts) == 1 && fsm.setName == "" {
		fsm.Type = desc.Single
	}
	for _, host := range cs.Hosts {
		fsm.addServer(desc.Endpoint(host).Canonicalize())
	}

	var serverDesc *desc.Server
	bir := &internal.BuildInfoResult{Version: "3.4.0", VersionArray: []uint8{3, 4, 0}}
	var imr *internal.IsMasterResult

	// phase 1 - response 1
	imr = &internal.IsMasterResult{}
	serverDesc = descutil.BuildServerDesc(desc.Endpoint("a:27017"), imr, bir)
	fsm.apply(serverDesc)

	// phase 1 outcome
	if fsm.setName != "" {
		t.Fatalf("expected fsm.setName to be \"\", but got \"%v\"", fsm.setName)
	}
	if fsm.Type != desc.Single {
		t.Fatalf("expected fsm.Type to be desc.Single, but got \"%v\"", fsm.Type)
	}
	if len(fsm.Servers) != 1 {
		t.Fatalf("expected len(fsm.Servers) to be 1, but got \"%v\"", len(fsm.Servers))
	}

	var ok bool
	serverDesc, ok = fsm.Server(desc.Endpoint("a:27017"))
	if !ok {
		t.Fatalf("server a:27017 was not found")
	}
	if serverDesc.Type != desc.UnknownServerType {
		t.Fatalf("expected serverDesc.Type to be desc.UnknownServerType, but got \"%v\"", serverDesc.Type)
	}
}
