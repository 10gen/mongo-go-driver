description: "operations ignore maxTimeMS and maxCommitTimeMS options if timeoutMS is set"

schemaVersion: "1.9"

# Most tests in this file can be executed against any server version, but some tests execute operations that are only
# available on higher server versions (e.g. abortTransaction). To avoid too many special cases in templated tests, the
# min server version is set to 4.2 for all.
runOnRequirements:
  - minServerVersion: "4.2"
    topologies: ["replicaset", "sharded-replicaset"]

initialData:
  - collectionName: &collectionName coll
    databaseName: &databaseName test
    documents: []

tests:
  # Test that transaction operations ignore maxCommitTimeMS if timeoutMS is set.
  - description: "commitTransaction ignores maxCommitTimeMS if timeoutMS is set"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents: ["aggregate"]
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - session:
                id: &session session
                client: *client
                sessionOptions:
                  defaultTransactionOptions:
                    maxCommitTimeMS: 5000
      - name: startTransaction
        object: *session
      - name: countDocuments
        object: *collection
        arguments:
          filter: {}
          session: *session
      - name: commitTransaction
        object: *session
        arguments:
          timeoutMS: &timeoutMS 1000
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: commitTransaction
              databaseName: admin
              command:
                commitTransaction: 1
                # Assert that the final maxTimeMS field is derived from timeoutMS, not maxCommitTimeMS.
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "withTransaction ignores maxCommitTimeMS if timeoutMS is set"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - session:
                id: &session session
                client: *client
                sessionOptions:
                  defaultTransactionOptions:
                    maxCommitTimeMS: 5000
      - name: withTransaction
        object: *session
        arguments:
          timeoutMS: &timeoutMS 1000
          callback:
            - name: countDocuments
              object: *collection
              arguments:
                filter: {}
                session: *session
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: aggregate
              databaseName: *databaseName
              command:
                aggregate: *collectionName
                writeConcern: { $$exists: false }
                maxTimeMS: { $$type: ["int", "long"] }
          - commandStartedEvent:
              commandName: commitTransaction
              databaseName: admin
              command:
                commitTransaction: 1
                # Assert that the final maxTimeMS field is derived from timeoutMS, not maxCommitTimeMS.
                maxTimeMS: { $$lte: *timeoutMS }

  # For each operation, if the operation supports maxTimeMS, test that it ignores maxTimeMS if timeoutMS is set.
  # The test executes the operation with timeoutMS=1000 and maxTimeMS=5000. It expects the operation to succeed
  # and uses command monitoring expectations to assert that the actual maxTimeMS value sent was less than or
  # equal to 100, thereby asserting that it was actually derived from timeoutMS.
  - description: "maxTimeMS is ignored if timeoutMS is set - aggregate on database"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: aggregate
        object: *database
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          pipeline: [ { $listLocalSessions: {} }, { $limit: 1 } ]
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: aggregate
              databaseName: *databaseName
              command:
                aggregate: 1
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - aggregate on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: aggregate
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          pipeline: []
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: aggregate
              databaseName: *databaseName
              command:
                aggregate: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - count on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: count
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          filter: {}
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: count
              databaseName: *databaseName
              command:
                count: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - estimatedDocumentCount on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: estimatedDocumentCount
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: count
              databaseName: *databaseName
              command:
                count: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - distinct on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: distinct
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          fieldName: x
          filter: {}
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: distinct
              databaseName: *databaseName
              command:
                distinct: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - find on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: find
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          filter: {}
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: find
              databaseName: *databaseName
              command:
                find: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - findOne on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: findOne
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          filter: {}
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: find
              databaseName: *databaseName
              command:
                find: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - findOneAndDelete on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: findOneAndDelete
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          filter: {}
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: findAndModify
              databaseName: *databaseName
              command:
                findAndModify: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - findOneAndReplace on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: findOneAndReplace
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          filter: {}
          replacement: { x: 1 }
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: findAndModify
              databaseName: *databaseName
              command:
                findAndModify: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - findOneAndUpdate on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: findOneAndUpdate
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          filter: {}
          update: { $set: { x: 1 } }
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: findAndModify
              databaseName: *databaseName
              command:
                findAndModify: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - createIndex on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: createIndex
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          keys: { x: 1 }
          name: "x_1"
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: createIndexes
              databaseName: *databaseName
              command:
                createIndexes: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - dropIndex on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: dropIndex
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
          name: "x_1"
        expectError:
          isClientError: false
          isTimeoutError: false
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: dropIndexes
              databaseName: *databaseName
              command:
                dropIndexes: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

  - description: "maxTimeMS is ignored if timeoutMS is set - dropIndexes on collection"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                useMultipleMongoses: false
                observeEvents:
                  - commandStartedEvent
                ignoreCommandMonitoringEvents:
                  - killCursors
            - database:
                id: &database database
                client: *client
                databaseName: *databaseName
            - collection:
                id: &collection collection
                database: *database
                collectionName: *collectionName
            - bucket:
                id: &bucket bucket
                database: *database
            - session:
                id: &session session
                client: *client
      - name: dropIndexes
        object: *collection
        arguments:
          timeoutMS: &timeoutMS 1000
          maxTimeMS: 5000
    expectEvents:
      - client: *client
        events:
          - commandStartedEvent:
              commandName: dropIndexes
              databaseName: *databaseName
              command:
                dropIndexes: *collectionName
                maxTimeMS: { $$lte: *timeoutMS }

