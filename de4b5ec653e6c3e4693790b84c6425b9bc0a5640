{
  "comments": [
    {
      "key": {
        "uuid": "c6c7d65b_e5fdec26",
        "filename": "mongo/private/roots/command/aggregate.go",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I tend to think of Encode/Decode as inverse operations such that Encode(Decode(x)) \u003d\u003d x.  That isn\u0027t the case here.\n\nFor these functions, I think the purpose/usage will be much clearer if they are called something like \"BuildRequest\" and \"ParseResponse\".",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8947b3dc_d52691ee",
        "filename": "mongo/private/roots/command/cursor.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Why is cursor in the command package?  It doesn\u0027t seem to fit the abstraction.  Should it be \u0027mongo/cursor\u0027 and thus usable both by private/* and by mongo?",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8b94fe0_7af03786",
        "filename": "mongo/private/roots/command/dispatch/dispatch.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I suggest pulling this up to be a sibling of the command package rather than in a subdirectory.  I think of subdirectories as specializations or subtypes of the parent and this is distinct.  In \"MVC\" terms, the command is the model and this is the controller -- a distinct entity in its own right.\n\nI think it would also benefit with comments about the role it plays, as it\u0027s really central.  E.g. put in generic logic to show how this selects a server, gets the version-specific wire message from the command object, puts it on the wire, collects the response, gets a response object from the command object, and returns that to the caller.  Plus talk about why we need a dispatcher for every command.\n\nSide question: Do we really need a dispatcher for every command type or do we need a dispatcher for every *result* type?  If command had an interface requiring \"BuildRequest\u0027 and \"ParseResponse\" and a new method to indicate if it\u0027s a write or not -- e.g. ServerPreference where writes always say \u0027primary\u0027 and reads give a read preference -- then I think we don\u0027t need so many dispatchers.  Example that could work for any command that returns a cursor and error:\n\nfunc DispatchForCursor(context.Context, topology.Topology, command.Interface) (Cursor, error) {\n    // select server from Topology based on command.ServerPreference\n    // get WireMessage from command.BuildRequest(...)\n    // send WireMessage over server connection\n    // get WireMessage from server connection\n    // get Cursor from command.ParseResponse(...)\n    // return Cursor\n}\n\nThe downside is that ParseResponse as an interface would to return empty interface and then have the dispatcher cast it to the correct type.\n\nJesse suggested an alternative to avoid needing type adapting dispatchers at all:  have a single Dispatch that returns a WireMessage and have the caller of Dispatch call command.ParseResponse(...) on it.  That\u0027s really clean, but implies ParseResponse shouldn\u0027t take a server description (as that should be internal to dispatchers).  I think that\u0027s probably fine -- I think most drivers parse responses just from the reply not based on wire version, but we\u0027d want to double check it.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44488bd4_324de9c3",
        "filename": "mongo/private/roots/command/ismaster.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Some things like this don\u0027t really need a command object -- even if historically they had a struct for it.  I\u0027m pretty sure we can just use a regular command and read values out of a bson.Reader.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3006aef0_7c5a01c5",
        "filename": "mongo/private/roots/command/namespace.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "This seems like it may have general applicability.  I don\u0027t know if it needs to live in the command package.  I don\u0027t really want a \"utils\" or \"common\" or \"models\" package, but we might keep an eye out in case there winds up being a more natural home.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acc74496_45af15fc",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "\"wireops.Ops\"?",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0cc3f34_a5d95449",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I don\u0027t understand why the argument is a `func(string) string` and ditto below where args are `func(X) X`.  I would think they would take the argument and return the config-modifying closure.",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 16
      },
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbfd220a_8cc4d920",
        "filename": "mongo/private/roots/connection/listener.go",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I think we can omit this for now as being well out-of-scope.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "591236ac_b4f22cdc",
        "filename": "mongo/private/roots/connection/proxy.go",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Again, I think this is far enough out of scope that we should omit it.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cc33c3e_cc7c4c45",
        "filename": "mongo/private/roots/connection/server.go",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "out of scope",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8514fb08_6a8568d7",
        "filename": "mongo/private/roots/connection/tlsconfig.go",
        "patchSetId": 5
      },
      "lineNbr": 6,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "This turns out to lead to an odd race condition that Sam uncovered today relating to the fact that we have to mutate the server name in the config for every connection.  The actual tls.Config needs to be lazily created right before use.  Don\u0027t worry about it for now, this can follow suit with Sam\u0027s changes later.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da437cb2_99ecaafb",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I think that may be true -- though much of the guts might still be in a private method",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95b600c9_1d8c80d5",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "It might be a good application of the atomic.Value type.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84f39bc0_ccd09260",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Ditto my question about why the argument is of the form `func(X) X`",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2a82487_60f0e30c",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "uint8?",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8017f331_3a6a64e0",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "uint8?",
      "range": {
        "startLine": 91,
        "startChar": 16,
        "endLine": 91,
        "endChar": 22
      },
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dccb07b_d05edfbe",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I don\u0027t think this is just an alias of Server -- in the current implementation it drags along other information",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad2d0e68_b955e4e5",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 138,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "This seems really underdeveloped compared to the rest -- there\u0027s a lot of logic involved",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b76fde90_b0396b4c",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 144,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Ditto concerns about `func(X) X` pattern.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}