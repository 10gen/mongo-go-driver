{
  "comments": [
    {
      "key": {
        "uuid": "c6c7d65b_e5fdec26",
        "filename": "mongo/private/roots/command/aggregate.go",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I tend to think of Encode/Decode as inverse operations such that Encode(Decode(x)) \u003d\u003d x.  That isn\u0027t the case here.\n\nFor these functions, I think the purpose/usage will be much clearer if they are called something like \"BuildRequest\" and \"ParseResponse\".",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a03bf819_0ca8b217",
        "filename": "mongo/private/roots/command/aggregate.go",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "I chose Encode and Decode since the type is being encoded to a WireMessage and decoded from a WireMessage. If we want to make it more verbose we could add a Result method for Aggregate, but the way these work currently they are more or less namespaces. In this case, I don\u0027t see how BuildRequest and ParseResponse conveys the semantics of what these methods are doing any better than Encode and Decode.",
      "parentUuid": "c6c7d65b_e5fdec26",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a69a0258_bd296315",
        "filename": "mongo/private/roots/command/aggregate.go",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Think about it in terms of JSON or some other serialization.  I think people would generally expect that if Encode(X) gives Y then Decode(Y) should give X.  That\u0027s not what we\u0027re doing here because those functions aren\u0027t designed to operate on the same WireMessage.  By calling it BuildRequest and ParseResponse, we make it more apparent that the messages produced/consumed are semantically different.",
      "parentUuid": "a03bf819_0ca8b217",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a9fc32d_4a669afa",
        "filename": "mongo/private/roots/command/aggregate.go",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T22:40:26Z",
      "side": 1,
      "message": "I think I can settle for EncodeRequest and DecodeResponse.",
      "parentUuid": "a69a0258_bd296315",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8947b3dc_d52691ee",
        "filename": "mongo/private/roots/command/cursor.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Why is cursor in the command package?  It doesn\u0027t seem to fit the abstraction.  Should it be \u0027mongo/cursor\u0027 and thus usable both by private/* and by mongo?",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6426823_f28c9a34",
        "filename": "mongo/private/roots/command/cursor.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "Cursor is here because it was in the ops package. Since it\u0027s an interface, I don\u0027t necessarily see the problem with defining it in two places, especially since it helps ensure a separation between mongo and private.",
      "parentUuid": "8947b3dc_d52691ee",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b6827b3_af5dc895",
        "filename": "mongo/private/roots/command/cursor.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Ack that it\u0027s where it is now.  I think that\u0027s part of the muddled nature of what we have now.  This might benefit from a F2F discussion.",
      "parentUuid": "b6426823_f28c9a34",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8b94fe0_7af03786",
        "filename": "mongo/private/roots/command/dispatch/dispatch.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I suggest pulling this up to be a sibling of the command package rather than in a subdirectory.  I think of subdirectories as specializations or subtypes of the parent and this is distinct.  In \"MVC\" terms, the command is the model and this is the controller -- a distinct entity in its own right.\n\nI think it would also benefit with comments about the role it plays, as it\u0027s really central.  E.g. put in generic logic to show how this selects a server, gets the version-specific wire message from the command object, puts it on the wire, collects the response, gets a response object from the command object, and returns that to the caller.  Plus talk about why we need a dispatcher for every command.\n\nSide question: Do we really need a dispatcher for every command type or do we need a dispatcher for every *result* type?  If command had an interface requiring \"BuildRequest\u0027 and \"ParseResponse\" and a new method to indicate if it\u0027s a write or not -- e.g. ServerPreference where writes always say \u0027primary\u0027 and reads give a read preference -- then I think we don\u0027t need so many dispatchers.  Example that could work for any command that returns a cursor and error:\n\nfunc DispatchForCursor(context.Context, topology.Topology, command.Interface) (Cursor, error) {\n    // select server from Topology based on command.ServerPreference\n    // get WireMessage from command.BuildRequest(...)\n    // send WireMessage over server connection\n    // get WireMessage from server connection\n    // get Cursor from command.ParseResponse(...)\n    // return Cursor\n}\n\nThe downside is that ParseResponse as an interface would to return empty interface and then have the dispatcher cast it to the correct type.\n\nJesse suggested an alternative to avoid needing type adapting dispatchers at all:  have a single Dispatch that returns a WireMessage and have the caller of Dispatch call command.ParseResponse(...) on it.  That\u0027s really clean, but implies ParseResponse shouldn\u0027t take a server description (as that should be internal to dispatchers).  I think that\u0027s probably fine -- I think most drivers parse responses just from the reply not based on wire version, but we\u0027d want to double check it.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80ab714d_096c15f0",
        "filename": "mongo/private/roots/command/dispatch/dispatch.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "These dispatch methods are essentially helpers for sending a given command to a given topology. They aren\u0027t of any use by themselves and they aren\u0027t independent of the command package. The Encode and Decode methods are all slightly different, which is why each of the commands needs its own dispatch function. We could, as you suggested, consolidate the ones that return a cursor under a single dispatch function, but that seems more difficult to understand than just having a one to one parity. \n\nWe could potentially not have these as a separate package, but I think these really are helper functions. I don\u0027t necessarily see the value in adding them to the command types as methods, but I also think that we should have methods on the commands that handle the round trip directly on a connection. The functions in this package could depend on those methods as well, but that suggests that these functions should just be methods on the commands.",
      "parentUuid": "d8b94fe0_7af03786",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed72ac3f_a78329b5",
        "filename": "mongo/private/roots/command/dispatch/dispatch.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "If you see them just as helpers, then we should move them into each command as a \"Dispatch\" method on the type.  Then we can have a \"dispatcher\" package at the private root and have it called by a command\u0027s Dispatch to take the topology and a command and return a wire message response (possibly retrying).\n\nExample:\n\n// This command dispatches a retryable write\nfunc (u Update) Dispatch(ctx context.Context, t topology.Topology, c command.Interface) (result.Update, error) {\n    wireMsgResponse, serverDescription, err :\u003d dispatcher.SendRetryableWrite(ctx, t, c)\n    if err !\u003d nil {\n       return nil, err\n    }\n    return c.ParseResponse(serverDescription, wireMsgResponse)\n}\n     \n// This command dispatches a read\nfunc (f Find) Dispatch(ctx context.Context, t topology.Topology, c command.Interface) (Cursor, error) {\n    wireMsgResponse, serverDescription, err :\u003d dispatcher.SendRead(ctx, t, c)\n    if err !\u003d nil {\n       return nil, err\n    }\n    return c.ParseResponse(serverDescription, wireMsgResponse)\n}",
      "parentUuid": "80ab714d_096c15f0",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44488bd4_324de9c3",
        "filename": "mongo/private/roots/command/ismaster.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Some things like this don\u0027t really need a command object -- even if historically they had a struct for it.  I\u0027m pretty sure we can just use a regular command and read values out of a bson.Reader.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30f594f1_4cfd1c97",
        "filename": "mongo/private/roots/command/ismaster.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "Sam and I talked about this, and we issue IsMaster commands in enough places that it made sense to have a command that does this instead of throwing together a *bson.Document and then pushing it through command.Command.",
      "parentUuid": "44488bd4_324de9c3",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3894048e_b6e56f0e",
        "filename": "mongo/private/roots/command/ismaster.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "30f594f1_4cfd1c97",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3006aef0_7c5a01c5",
        "filename": "mongo/private/roots/command/namespace.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "This seems like it may have general applicability.  I don\u0027t know if it needs to live in the command package.  I don\u0027t really want a \"utils\" or \"common\" or \"models\" package, but we might keep an eye out in case there winds up being a more natural home.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "702fd433_7e45cfdc",
        "filename": "mongo/private/roots/command/namespace.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "Namespace currently lives in ops, and I don\u0027t necessarily see a reason to move it.",
      "parentUuid": "3006aef0_7c5a01c5",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c2390cc_8389d8f1",
        "filename": "mongo/private/roots/command/namespace.go",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "702fd433_7e45cfdc",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acc74496_45af15fc",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "\"wireops.Ops\"?",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14ce316f_bc6cff59",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "wireops.Ops -\u003e wiremessage.WireMessage",
      "parentUuid": "acc74496_45af15fc",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0cc3f34_a5d95449",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I don\u0027t understand why the argument is a `func(string) string` and ditto below where args are `func(X) X`.  I would think they would take the argument and return the config-modifying closure.",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 16
      },
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92fbbf61_9065bdbb",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "I believe I explained in a meeting that Craig and I came up with this design as a simplification. We pass in the current value to the function and it returns a value to replace. This eliminates many of the \"WithMore*\" functions.",
      "parentUuid": "e0cc3f34_a5d95449",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 16
      },
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68dff06d_f81ef079",
        "filename": "mongo/private/roots/connection/connection.go",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "You\u0027ll need to walk me through this F2F, I think.  It\u0027s pretty far from Dave Cheney\u0027s functional options pattern.  I wasn\u0027t a big fan of the unique approach we had for dealing with reusable command options going into BSON docs instead of just being mutators of a configuration struct, but I think the database API forces us in that direction.  Here, we\u0027re working with normal Go structs for configuration options so this extra indirection seems unnecessarily complex and I\u0027d like to better understand why the normal pattern doesn\u0027t work.",
      "parentUuid": "92fbbf61_9065bdbb",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 55,
        "endChar": 16
      },
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbfd220a_8cc4d920",
        "filename": "mongo/private/roots/connection/listener.go",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I think we can omit this for now as being well out-of-scope.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d53f71d6_fd041a54",
        "filename": "mongo/private/roots/connection/listener.go",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "I specifically asked if we wanted this library to be the mongo networking library for Go. You agreed. Have you changed your mind?",
      "parentUuid": "dbfd220a_8cc4d920",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2bd0a29_23604e7e",
        "filename": "mongo/private/roots/connection/listener.go",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Eventually, yes, we want the private libraries to replace the rest.  That\u0027s not, however, in the scope of work we need to do for the GA release of the driver.",
      "parentUuid": "d53f71d6_fd041a54",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "591236ac_b4f22cdc",
        "filename": "mongo/private/roots/connection/proxy.go",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Again, I think this is far enough out of scope that we should omit it.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32fdfddf_e81b8ca9",
        "filename": "mongo/private/roots/connection/proxy.go",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "Refer to Listener.",
      "parentUuid": "591236ac_b4f22cdc",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac5fae13_76e3d997",
        "filename": "mongo/private/roots/connection/proxy.go",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "32fdfddf_e81b8ca9",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cc33c3e_cc7c4c45",
        "filename": "mongo/private/roots/connection/server.go",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "out of scope",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "447f4000_0f83f140",
        "filename": "mongo/private/roots/connection/server.go",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "Refer to Listener.",
      "parentUuid": "5cc33c3e_cc7c4c45",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b30aefea_b2b988f0",
        "filename": "mongo/private/roots/connection/server.go",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "447f4000_0f83f140",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8514fb08_6a8568d7",
        "filename": "mongo/private/roots/connection/tlsconfig.go",
        "patchSetId": 5
      },
      "lineNbr": 6,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "This turns out to lead to an odd race condition that Sam uncovered today relating to the fact that we have to mutate the server name in the config for every connection.  The actual tls.Config needs to be lazily created right before use.  Don\u0027t worry about it for now, this can follow suit with Sam\u0027s changes later.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "264ffbb6_64dcdaa4",
        "filename": "mongo/private/roots/connection/tlsconfig.go",
        "patchSetId": 5
      },
      "lineNbr": 6,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8514fb08_6a8568d7",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da437cb2_99ecaafb",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I think that may be true -- though much of the guts might still be in a private method",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95b600c9_1d8c80d5",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "It might be a good application of the atomic.Value type.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fe84e0a_7ce2ebb9",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "The spec specifically suggests that we use immutable values.",
      "parentUuid": "95b600c9_1d8c80d5",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad6eaa50_fd1678e6",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Exactly.  atomic.Value lets you swap in one immutable value for another in a way that goroutines still reading the old immutable state can finish before it gets garbage collected.  See the \"ReadMostly\" example in the docs.  So readers can keep reading topology and server descriptions without locking while we construct a new one based on a new ismaster result, then we atomically swap in the new immutable topology structure when we\u0027re done constructing it.",
      "parentUuid": "3fe84e0a_7ce2ebb9",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84f39bc0_ccd09260",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Ditto my question about why the argument is of the form `func(X) X`",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51b2f829_cee0cbc8",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "Same answer as before.",
      "parentUuid": "84f39bc0_ccd09260",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2024f61_e2c9241f",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "51b2f829_cee0cbc8",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2a82487_60f0e30c",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "uint8?",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c742e77e_d9db5c38",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "They were uint32\u0027s in the current code.",
      "parentUuid": "a2a82487_60f0e30c",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d83dcfa7_066d204e",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c742e77e_d9db5c38",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8017f331_3a6a64e0",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "uint8?",
      "range": {
        "startLine": 91,
        "startChar": 16,
        "endLine": 91,
        "endChar": 22
      },
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9351e389_500db367",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "They were uint32\u0027s in the current code.",
      "parentUuid": "8017f331_3a6a64e0",
      "range": {
        "startLine": 91,
        "startChar": 16,
        "endLine": 91,
        "endChar": 22
      },
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "868b7196_97694fd3",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9351e389_500db367",
      "range": {
        "startLine": 91,
        "startChar": 16,
        "endLine": 91,
        "endChar": 22
      },
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dccb07b_d05edfbe",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "I don\u0027t think this is just an alias of Server -- in the current implementation it drags along other information",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ae3ca05_e415c54e",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "I didn\u0027t necessarily see why we needed an entirely different type, but I\u0027m open to the idea of having this be it\u0027s own struct type.",
      "parentUuid": "5dccb07b_d05edfbe",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "866ee284_9e9f5b2d",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T22:20:10Z",
      "side": 1,
      "message": "I had to look up what was going on.  In the existing code, SelectedServer includes the read preference that was used to select the server for later use by other things.  There\u0027s no reason that the code that calls SelectServer can\u0027t construct such a thing itself, but that\u0027s not what the current code does. So either the type SelectedServer should go away or it should continue to be a struct with \"selected server plus metadata\".",
      "parentUuid": "5ae3ca05_e415c54e",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad2d0e68_b955e4e5",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 138,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "This seems really underdeveloped compared to the rest -- there\u0027s a lot of logic involved",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "061b08e1_1d088d70",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 138,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "This is mainly because we will just be copying the implementation from the current SDAM implementation, as per your suggestion.",
      "parentUuid": "ad2d0e68_b955e4e5",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b76fde90_b0396b4c",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 144,
      "author": {
        "id": 1012906
      },
      "writtenOn": "2018-02-28T03:50:09Z",
      "side": 1,
      "message": "Ditto concerns about `func(X) X` pattern.",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ef4234b_529e96b0",
        "filename": "mongo/private/roots/topology/topology.go",
        "patchSetId": 5
      },
      "lineNbr": 144,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2018-02-28T17:27:19Z",
      "side": 1,
      "message": "Same answer as before.",
      "parentUuid": "b76fde90_b0396b4c",
      "revId": "de4b5ec653e6c3e4693790b84c6425b9bc0a5640",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}