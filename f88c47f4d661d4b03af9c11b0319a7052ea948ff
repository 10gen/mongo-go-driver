{
  "comments": [
    {
      "key": {
        "uuid": "162db527_f69dc404",
        "filename": "mongo/change_stream.go",
        "patchSetId": 7
      },
      "lineNbr": 193,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-07-09T21:41:36Z",
      "side": 1,
      "message": "Can we format this onto multiple lines? It\u0027s a bit difficult to read right now.",
      "range": {
        "startLine": 193,
        "startChar": 19,
        "endLine": 193,
        "endChar": 235
      },
      "revId": "f88c47f4d661d4b03af9c11b0319a7052ea948ff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6a1f0a1_720071b7",
        "filename": "mongo/change_stream.go",
        "patchSetId": 7
      },
      "lineNbr": 205,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-07-09T21:41:36Z",
      "side": 1,
      "message": "Since retryable reads doesn\u0027t require sessions, this should be:\n\n(cs.client.topology.RetryType() \u003d\u003d driver.RetryRead ||\n(cs.client.topology.RetryType() \u003d\u003d driver.RetryWrite \u0026\u0026 description.SessionsSupported(conn.Description().WireVersion)))",
      "range": {
        "startLine": 205,
        "startChar": 9,
        "endLine": 205,
        "endChar": 181
      },
      "revId": "f88c47f4d661d4b03af9c11b0319a7052ea948ff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5482508c_fd4876f7",
        "filename": "mongo/command_monitoring_test.go",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-07-09T21:41:36Z",
      "side": 1,
      "message": "While we depend on require in many places, we\u0027ve been trying to avoid adding it to new fields, instead opting to use the standard library.",
      "range": {
        "startLine": 55,
        "startChar": 1,
        "endLine": 55,
        "endChar": 51
      },
      "revId": "f88c47f4d661d4b03af9c11b0319a7052ea948ff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6da0451e_939b4932",
        "filename": "mongo/crud_util_test.go",
        "patchSetId": 7
      },
      "lineNbr": 693,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-07-09T21:41:36Z",
      "side": 1,
      "message": "We can just delete verifyCursorResult2, it was a function that I used when converting to batch cursors.",
      "range": {
        "startLine": 693,
        "startChar": 5,
        "endLine": 693,
        "endChar": 23
      },
      "revId": "f88c47f4d661d4b03af9c11b0319a7052ea948ff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d768dae7_7f4d3115",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 7
      },
      "lineNbr": 268,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-07-09T21:41:36Z",
      "side": 1,
      "message": "We don\u0027t need to have a session for retryable reads.",
      "range": {
        "startLine": 268,
        "startChar": 16,
        "endLine": 268,
        "endChar": 34
      },
      "revId": "f88c47f4d661d4b03af9c11b0319a7052ea948ff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9e0478f_046cfd7b",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-07-09T21:41:36Z",
      "side": 1,
      "message": "In the case where we support retryable reads but not retryable writes, wouldn\u0027t this not do the retry because it would fail the check for retryable writes?",
      "range": {
        "startLine": 364,
        "startChar": 36,
        "endLine": 364,
        "endChar": 154
      },
      "revId": "f88c47f4d661d4b03af9c11b0319a7052ea948ff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4355d951_fa70353b",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 7
      },
      "lineNbr": 410,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-07-09T21:41:36Z",
      "side": 1,
      "message": "Same question as above.",
      "range": {
        "startLine": 410,
        "startChar": 36,
        "endLine": 410,
        "endChar": 154
      },
      "revId": "f88c47f4d661d4b03af9c11b0319a7052ea948ff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc5ec90b_26e44d27",
        "filename": "x/mongo/driver/operation.go",
        "patchSetId": 7
      },
      "lineNbr": 493,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-07-09T21:41:36Z",
      "side": 1,
      "message": "It feels like we should be able to have these as one function. If you want to know if something is definitively a retryable read or a retryable write the method can take in a RetryType.",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 493,
        "endChar": 1
      },
      "revId": "f88c47f4d661d4b03af9c11b0319a7052ea948ff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f68426ee_e0e0bee0",
        "filename": "x/mongo/driver/topology/topology.go",
        "patchSetId": 7
      },
      "lineNbr": 261,
      "author": {
        "id": 1001503
      },
      "writtenOn": "2019-07-09T21:41:36Z",
      "side": 1,
      "message": "We don\u0027t have to have sessions for a topology to support retryable reads.",
      "range": {
        "startLine": 261,
        "startChar": 4,
        "endLine": 261,
        "endChar": 46
      },
      "revId": "f88c47f4d661d4b03af9c11b0319a7052ea948ff",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}