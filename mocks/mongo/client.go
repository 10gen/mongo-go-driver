// Code generated by MockGen. DO NOT EDIT.
// Source: go.mongodb.org/mongo-driver/mongo (interfaces: Client)

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockClient) Connect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockClientMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClient)(nil).Connect), arg0)
}

// Database mocks base method
func (m *MockClient) Database(arg0 string, arg1 ...*options.DatabaseOptions) *mongo.Database {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Database", varargs...)
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// Database indicates an expected call of Database
func (mr *MockClientMockRecorder) Database(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClient)(nil).Database), varargs...)
}

// Disconnect mocks base method
func (m *MockClient) Disconnect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockClientMockRecorder) Disconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect), arg0)
}

// ListDatabaseNames mocks base method
func (m *MockClient) ListDatabaseNames(arg0 context.Context, arg1 interface{}, arg2 ...*options.ListDatabasesOptions) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabaseNames", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabaseNames indicates an expected call of ListDatabaseNames
func (mr *MockClientMockRecorder) ListDatabaseNames(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabaseNames", reflect.TypeOf((*MockClient)(nil).ListDatabaseNames), varargs...)
}

// ListDatabases mocks base method
func (m *MockClient) ListDatabases(arg0 context.Context, arg1 interface{}, arg2 ...*options.ListDatabasesOptions) (mongo.ListDatabasesResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatabases", varargs...)
	ret0, _ := ret[0].(mongo.ListDatabasesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases
func (mr *MockClientMockRecorder) ListDatabases(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockClient)(nil).ListDatabases), varargs...)
}

// NumberSessionsInProgress mocks base method
func (m *MockClient) NumberSessionsInProgress() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberSessionsInProgress")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumberSessionsInProgress indicates an expected call of NumberSessionsInProgress
func (mr *MockClientMockRecorder) NumberSessionsInProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberSessionsInProgress", reflect.TypeOf((*MockClient)(nil).NumberSessionsInProgress))
}

// Ping mocks base method
func (m *MockClient) Ping(arg0 context.Context, arg1 *readpref.ReadPref) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockClientMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping), arg0, arg1)
}

// StartSession mocks base method
func (m *MockClient) StartSession(arg0 ...*options.SessionOptions) (mongo.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSession", varargs...)
	ret0, _ := ret[0].(mongo.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession
func (mr *MockClientMockRecorder) StartSession(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockClient)(nil).StartSession), arg0...)
}

// UseSession mocks base method
func (m *MockClient) UseSession(arg0 context.Context, arg1 func(mongo.SessionContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseSession indicates an expected call of UseSession
func (mr *MockClientMockRecorder) UseSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseSession", reflect.TypeOf((*MockClient)(nil).UseSession), arg0, arg1)
}

// UseSessionWithOptions mocks base method
func (m *MockClient) UseSessionWithOptions(arg0 context.Context, arg1 *options.SessionOptions, arg2 func(mongo.SessionContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseSessionWithOptions", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseSessionWithOptions indicates an expected call of UseSessionWithOptions
func (mr *MockClientMockRecorder) UseSessionWithOptions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseSessionWithOptions", reflect.TypeOf((*MockClient)(nil).UseSessionWithOptions), arg0, arg1, arg2)
}

// Watch mocks base method
func (m *MockClient) Watch(arg0 context.Context, arg1 interface{}, arg2 ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(*mongo.ChangeStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClientMockRecorder) Watch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClient)(nil).Watch), varargs...)
}

// client mocks base method
func (m *MockClient) client() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "client")
}

// client indicates an expected call of client
func (mr *MockClientMockRecorder) client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "client", reflect.TypeOf((*MockClient)(nil).client))
}
