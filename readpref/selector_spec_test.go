// Code generated by "selector_spec_test_generator.go"; DO NOT EDIT

package readpref_test

import (
	"testing"

	"github.com/10gen/mongo-go-driver/desc"
	. "github.com/10gen/mongo-go-driver/readpref"
	"github.com/stretchr/testify/require"
)

func TestReadPref_ReplicaSetNoPrimary_read_Nearest(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(NearestMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("c:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_Nearest_multiple(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(NearestMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("c:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_Nearest_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(NearestMode,
		desc.NewTagSet(
			"data_center", "sf",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetNoPrimary_read_Primary(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(PrimaryMode,
		desc.NewTagSet(),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetNoPrimary_read_PrimaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(PrimaryPreferredMode,
		desc.NewTagSet(),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("c:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_PrimaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(PrimaryPreferredMode,
		desc.NewTagSet(
			"data_center", "sf",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetNoPrimary_read_Secondary(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("c:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryPreferredMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("c:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_SecondaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryPreferredMode,
		desc.NewTagSet(
			"data_center", "sf",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetNoPrimary_read_Secondary_multi_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryMode,
		desc.NewTagSet(
			"data_center", "nyc",

			"rack", "one",
		),
		desc.NewTagSet(
			"other_tag", "doesntexist",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",

					"rack", "one",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "sf",

					"rack", "two",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_Secondary_multi_tags2(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryMode,
		desc.NewTagSet(
			"data_center", "nyc",

			"rack", "one",
		),
		desc.NewTagSet(
			"other_tag", "doesntexist",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",

					"rack", "one",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",

					"rack", "two",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_Secondary_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryMode,
		desc.NewTagSet(
			"data_center", "sf",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetNoPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetWithPrimary_read_Nearest(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(NearestMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 3)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("a:27017"),
			Type:     desc.RSPrimary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("c:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_Nearest_multiple(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(NearestMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 3)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("a:27017"),
			Type:     desc.RSPrimary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("c:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_Nearest_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(NearestMode,
		desc.NewTagSet(
			"data_center", "sf",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetWithPrimary_read_Primary(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(PrimaryMode,
		desc.NewTagSet(),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("a:27017"),
			Type:     desc.RSPrimary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_PrimaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(PrimaryPreferredMode,
		desc.NewTagSet(),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("a:27017"),
			Type:     desc.RSPrimary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_PrimaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(PrimaryPreferredMode,
		desc.NewTagSet(
			"data_center", "sf",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("a:27017"),
			Type:     desc.RSPrimary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_Secondary(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("c:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryPreferredMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("b:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("c:27017"),
			Type:     desc.RSSecondary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_SecondaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryPreferredMode,
		desc.NewTagSet(
			"data_center", "sf",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("a:27017"),
			Type:     desc.RSPrimary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_SecondaryPreferred_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryPreferredMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "sf",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("a:27017"),
			Type:     desc.RSPrimary,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_Secondary_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryMode,
		desc.NewTagSet(
			"data_center", "sf",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.ReplicaSetWithPrimary,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("b:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("c:27017"),
				Type:     desc.RSSecondary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.RSPrimary,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_Sharded_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryPreferredMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.Sharded,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("g:27017"),
				Type:     desc.Mongos,
				Tags: desc.NewTagSet(
					"data_center", "nyc",
				),
			},
			&desc.Server{
				Endpoint: desc.Endpoint("h:27017"),
				Type:     desc.Mongos,
				Tags: desc.NewTagSet(
					"data_center", "dc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("g:27017"),
			Type:     desc.Mongos,
			Tags: desc.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("h:27017"),
			Type:     desc.Mongos,
			Tags: desc.NewTagSet(
				"data_center", "dc",
			),
		},
	)
}

func TestReadPref_Single_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryPreferredMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type: desc.Single,
		Servers: []*desc.Server{
			&desc.Server{
				Endpoint: desc.Endpoint("a:27017"),
				Type:     desc.Standalone,
				Tags: desc.NewTagSet(
					"data_center", "dc",
				),
			},
		},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&desc.Server{
			Endpoint: desc.Endpoint("a:27017"),
			Type:     desc.Standalone,
			Tags: desc.NewTagSet(
				"data_center", "dc",
			),
		},
	)
}

func TestReadPref_Unknown_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := New(SecondaryPreferredMode,
		desc.NewTagSet(
			"data_center", "nyc",
		),
	)

	cluster := &desc.Cluster{
		Type:    desc.UnknownClusterType,
		Servers: []*desc.Server{},
	}

	result, err := SelectServer(subject, cluster, cluster.Servers)
	require.NoError(err)
	require.Len(result, 0)
}
