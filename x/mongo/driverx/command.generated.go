// Copyright (C) MongoDB, Inc. 2017-present.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

// Code generated by drivergen. DO NOT EDIT.

package driverx

import (
	"context"
	"errors"

	"go.mongodb.org/mongo-driver/mongo/readconcern"
	"go.mongodb.org/mongo-driver/mongo/readpref"
	"go.mongodb.org/mongo-driver/x/bsonx/bsoncore"
	"go.mongodb.org/mongo-driver/x/mongo/driver/session"
	"go.mongodb.org/mongo-driver/x/network/description"
)

// Command constructs and returns a new CommandOperation.
func Command(cmd bsoncore.Document) *CommandOperation {
	return &CommandOperation{cmd: cmd}
}

// Select retrieves a server to be used when executing an operation.
func (co *CommandOperation) Select(ctx context.Context) (Server, error) {
	if co.d == nil {
		return nil, errors.New("CommandOperation must have a Deployment set before Select can be called.")
	}

	return co.d.SelectServer(ctx, createReadPrefSelector(co.readPref, co.selector))
}

// SelectAndExecute selects a server and runs this operation against it.
func (co *CommandOperation) SelectAndExecute(ctx context.Context) error {
	srvr, err := co.Select(ctx)
	if err != nil {
		return err
	}

	return co.Execute(ctx, srvr)
}

// Execute runs this operation against the provided server.
func (co *CommandOperation) Execute(ctx context.Context, srvr Server) error {
	if co.d == nil {
		return errors.New("CommandOperation must have a Deployment set before Execute can be called.")
	}
	conn, err := srvr.Connection(ctx)
	if err != nil {
		return err
	}
	defer conn.Close()

	return co.execute(ctx, conn)
}

func (co *CommandOperation) Session(client *session.Client) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.client = client
	return co
}

func (co *CommandOperation) Clock(clock *session.ClusterClock) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.clock = clock
	return co
}

// Command sets the command that will be run.
func (co *CommandOperation) Command(cmd bsoncore.Document) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.cmd = cmd
	return co
}

// Deployment sets the Deployment to run the command against.
func (co *CommandOperation) Deployment(d Deployment) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.d = d
	return co
}

// Database sets the database to run the command against.
func (co *CommandOperation) Database(database string) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.database = database
	return co
}

// ReadConcern sets the read concern to use when running the command.
func (co *CommandOperation) ReadConcern(rc *readconcern.ReadConcern) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.rc = rc
	return co
}

func (co *CommandOperation) ReadPreference(readPref *readpref.ReadPref) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.readPref = readPref
	return co
}

func (co *CommandOperation) ServerSelector(selector description.ServerSelector) *CommandOperation {
	if co == nil {
		co = new(CommandOperation)
	}

	co.selector = selector
	return co
}
