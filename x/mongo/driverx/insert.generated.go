// Copyright (C) MongoDB, Inc. 2017-present.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License. You may obtain
// a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

// Code generated by drivergen. DO NOT EDIT.

package driverx

import (
	"go.mongodb.org/mongo-driver/mongo/writeconcern"
	"go.mongodb.org/mongo-driver/x/bsonx/bsoncore"
	"go.mongodb.org/mongo-driver/x/mongo/driver/session"
	"go.mongodb.org/mongo-driver/x/network/description"
)

// BypassDocumentValidation allows the operation to opt-out of document level validation. Valid
// for server versions >= 3.2. For servers < 3.2, this setting is ignored.
func (io InsertOperation) BypassDocumentValidation(bypassDocumentValidation bool) InsertOperation {
	io.bypassDocumentValidation = &bypassDocumentValidation
	return io
}

// Session sets the session for this operation.
func (io InsertOperation) Session(client *session.Client) InsertOperation {
	io.client = client
	return io
}

// ClusterClock sets the cluster clock for this operation.
func (io InsertOperation) ClusterClock(clock *session.ClusterClock) InsertOperation {
	io.clock = clock
	return io
}

// Deployment sets the deployment to use for this operation.
func (io InsertOperation) Deployment(d Deployment) InsertOperation {
	io.d = d
	return io
}

// Documents adds documents to this operation that will be inserted when this operation is
// executed.
func (io InsertOperation) Documents(documents ...bsoncore.Document) InsertOperation {
	io.documents = documents
	return io
}

// Namespace sets the database and collection to run this operation against.
func (io InsertOperation) Namespace(ns Namespace) InsertOperation {
	io.ns = ns
	return io
}

// Ordered sets ordered. If true, when a write fails, the operation will return the error, when
// false write failures do not stop execution of the operation.
func (io InsertOperation) Ordered(ordered bool) InsertOperation {
	io.ordered = &ordered
	return io
}

// Retry enables retryable writes for this operation. Retries are not handled automatically,
// instead a boolean is returned from Execute and SelectAndExecute that indicates if the
// operation can be retried. Retrying is handled by calling RetryExecute.
func (io InsertOperation) Retry(retry bool) InsertOperation {
	io.retry = &retry
	return io
}

// ServerSelector sets the selector used to retrieve a server.
func (io InsertOperation) ServerSelector(serverSelector description.ServerSelector) InsertOperation {
	io.serverSelector = serverSelector
	return io
}

// WriteConcern sets the write concern for this operation.
func (io InsertOperation) WriteConcern(writeConcern *writeconcern.WriteConcern) InsertOperation {
	io.writeConcern = writeConcern
	return io
}
